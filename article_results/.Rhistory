sam <- 0
for (k in 1:length(dist_rep)) {
sam <- sam + dist_rep[[k]]
}
sam <- sam/length(dist_rep)
rep_mean_q1[i,1] <- mean(sam[upper.tri(x = sam,diag = F)])
#rep_mean[i,1] <- sam
}
q1_mcf7_distances <- rep_mean_q1
reps_info <- drug_sigs_per_line_dups(cell_line = "MCF7",sig_info = sig,sig_metrics = sig_metrics)
reps_info$quality <- as.character(reps_info$quality)
reps_info <- reps_info %>% filter(quality == "2") %>%
group_by(pert_iname) %>%
mutate(count = n_distinct(sig_id),
count_dose = n_distinct(pert_dose),
count_time = n_distinct(pert_time)) %>%
ungroup() %>% filter(count > 1) %>% filter(count_dose == 1) %>% filter(count_time == 1)
drugs <- unique(as.character(reps_info$pert_iname))
rep_mean_q1 <- matrix(0,nrow = length(drugs),ncol = 1)
rownames(rep_mean_q1) <- drugs
#gene distance calculation for quality 1 replicates
for (i in 1:length(drugs)) {
drug <- drugs[i]
dist_rep <- list(0)
genes <- get_cmap_signatures(sig_ids = reps_info$sig_id[which(reps_info$pert_iname %in% drug)],cmap_path_to_gctx = ds_path,landmark_df = landmark,landmark = TRUE)
for (j in 1:length(thres)) {
dist2 <- distance_scores(num_table = genes,threshold_count = thres[j],names = colnames(genes))
dist_rep[[j]] <- dist2
}
sam <- 0
for (k in 1:length(dist_rep)) {
sam <- sam + dist_rep[[k]]
}
sam <- sam/length(dist_rep)
rep_mean_q1[i,1] <- mean(sam[upper.tri(x = sam,diag = F)])
#rep_mean[i,1] <- sam
}
multi2 <- function (x, col = palette(), lwd = 1, lty = 1, xlim, ylim,ylab = "Density",
...)
{
if (missing(xlim)) {
xvals <- unlist(lapply(x, function(z) {
range(z[is.finite(z)], na.rm = TRUE)
}))
xlim <- range(xvals[is.finite(xvals)])
}
dens <- lapply(x, function(x) {
density(x[is.finite(x)])
})
yvals <- unlist(lapply(dens, function(x) {
x$y
}))
plot(0, type = "n", xlim = xlim, ylim = ylim, ylab = ylab,
...)
out <- mapply(dens, rep(col, length = length(dens)), rep(lwd,
length = length(dens)), rep(lty, length = length(dens)),
FUN = function(x, col, lwd, lty) {
lines(x, col = col, lwd = lwd, lty = lty)
})
}
q2_mcf7_distances <- rep_mean_q1
multi2(list(q1_mcf7_distances[,1]/2,q2_mcf7_distances[,1]/2),xlab = "Gene-level distance", xlim = c(0,0.7),xaxs="i",yaxs="i", ylim = c(0,6))
title("A", adj = 0)
legend("topright",
legend = c("Q1 duplicate pairs (n = 20)", "Q2 duplicate pairs (n = 19)"),
col = c('black',
'red'),
lty = c(1,1),
bty = "o",
pt.cex = 1.5,
cex = 0.8,
text.col = "black",
horiz = F ,
inset = c(0.01, 0.01))
q1_mcf7_distances <- as.data.frame(q1_mcf7_distances)
q1_mcf7_distances$quality <- "Quality 1"
q2_mcf7_distances <- as.data.frame(q2_mcf7_distances)
q2_mcf7_distances$quality <- "Quality 2"
df_dot <- bind_rows(q1_mcf7_distances,q2_mcf7_distances)
df_dot$quality <- as.factor(df_dot$quality)
dotplot <- ggplot(df_dot, aes(x=quality, y=V1, fill = quality)) +
geom_violin()+geom_boxplot(width=0.1)+
scale_fill_discrete(name="Duplicate quality",
labels=c("Quality 1","Quality 2"))+
ylim(0,max(df_dot$V1))+
xlab("")+ylab("Gene-level distance")+
theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),text = element_text(size = 15),legend.position = "none")
dotplot
library(doFuture)
registerDoFuture()
plan(multiprocess,workers = 6)
data <- readRDS("../preprocessing/data_preprocessing/processed_data/initial_signatures_with_mycranks.rds")
gos <- go
thresholds <- c(10,20,30,40,50)
thresholds2 <- c(5,10,15,20,25)
vcap_q2 <- data %>%
filter(cell_id == "VCAP") %>%
#filter(pert_time == "24") %>%
filter(quality == "2")
mcf7_q2 <- data %>%
filter(cell_id == "MCF7") %>%
#filter(pert_time == "24") %>%
filter(quality == "2")
vcap_q2 <- vcap_q2[which(vcap_q2$pert_id %in% mcf7_q2$pert_id),]
mcf7_q2 <- mcf7_q2[which(mcf7_q2$pert_id %in% vcap_q2$pert_id),]
# gene distance calculations for vcap
# This section is optional, the data can be loaded premade from article_data
genes_vcap <- get_cmap_signatures(cmap_path_to_gctx = ds_path,sig_ids = as.character(vcap_q2$sig_id),landmark = TRUE,landmark_df = landmark)
genes_mcf7 <- get_cmap_signatures(cmap_path_to_gctx = ds_path,sig_ids = mcf7_q2$sig_id,landmark = TRUE,landmark_df = landmark)
thresholds <- c(10,20,30,40,50)
dist_all_vcap_q2 <- NULL
### calculate distances
dist_all_vcap_q2_g <- foreach(thres = thresholds) %dopar% {
distance_scores(num_table = genes_vcap,threshold_count = thres,names = colnames(genes_vcap))
}
ld <- length(dist_all_vcap_q2_g)
dimd <- dim(dist_all_vcap_q2_g[[1]])
distance_vcap_q2_g <- do.call(cbind,dist_all_vcap_q2_g)
distance_vcap_q2_g <- array(distance_vcap_q2_g,c(dim=dimd,ld))
mean_dist_vcap_q2_g <- apply(distance_vcap_q2_g, c(1,2), mean, na.rm = TRUE)
colnames(mean_dist_vcap_q2_g) <- vcap_q2$pert_iname
rownames(mean_dist_vcap_q2_g) <- vcap_q2$pert_iname
mean_dist_vcap_q2_g[upper.tri(x = mean_dist_vcap_q2_g,diag = T)] <- 666
gene_vcap2 <- reshape2::melt(mean_dist_vcap_q2_g)
gene_vcap2 <- gene_vcap2 %>% filter(value != 666)
colnames(gene_vcap2) <- c("pert1","pert2","gene_vcap")
dist_all_mcf7_q2 <- NULL
### calculate distances
dist_all_mcf7_q2_g <- foreach(thres = thresholds2) %dopar% {
distance_scores(num_table = genes_mcf7,threshold_count = thres,names = colnames(genes_mcf7))
}
ld <- length(dist_all_mcf7_q2_g)
dimd <- dim(dist_all_mcf7_q2_g[[1]])
distance_mcf7_q2_g <- do.call(cbind,dist_all_mcf7_q2_g)
distance_mcf7_q2_g <- array(distance_mcf7_q2_g,c(dim=dimd,ld))
mean_dist_mcf7_q2_g <- apply(distance_mcf7_q2_g, c(1,2), mean, na.rm = TRUE)
colnames(mean_dist_mcf7_q2_g) <- mcf7_q2$pert_iname
rownames(mean_dist_mcf7_q2_g) <- mcf7_q2$pert_iname
mean_dist_mcf7_q2_g[upper.tri(x = mean_dist_mcf7_q2_g,diag = T)] <- 666
gene_mcf72 <- reshape2::melt(mean_dist_mcf7_q2_g)
gene_mcf72 <- gene_mcf72 %>% filter(value != 666)
colnames(gene_mcf72) <- c("pert1","pert2","gene_mcf7")
allq2<-left_join(gene_vcap2,gene_mcf72,by = c("pert1"="pert1","pert2"="pert2"))
allq2 <- allq2 %>% filter(!is.na(gene_mcf7)) %>% mutate(gene_vcap = gene_vcap/2,
gene_mcf7 = gene_mcf7/2)
allq1 <- readRDS("figure_extra_data/figure_3/q1_res_fig1.rds")
allq1 <- readRDS("figure_extra_data/figure_3/q1_res_fig1.rds")
allq2 <- readRDS("figure_extra_data/figure_3/q2_res_fig1.rds")
plot(allq2$gene_vcap,allq2$gene_mcf7,pch=20,xlim = c(0,0.8),cex = 0.5,ylim = c(0,0.8),xlab="VCAP Gene-level distance",ylab="MCF7 Gene-level distance",xaxs="i",yaxs="i")
title("C", adj = 0)
abline(v=0.4,col="red",lwd = 2)
abline(h=0.39,col="red" ,lwd = 2)
legend("topleft",
legend = "Pearson's r = 0.075",
col = "black",
pch = '',
bty = "o",
pt.cex = 2,
cex = 1,
text.col = "black",
horiz = T )
q1plot <- ggplot(allq1,aes(x=gene_vcap,y = gene_mcf7)) +
geom_point(size = 0.1) + xlab("VCAP gene-level distance") + ylab("MCF7 gene-level distance") +
geom_vline(aes(xintercept=0.19),linetype="dotdash",col = "red",lwd = 0.75)+
geom_hline(aes(yintercept=0.2),linetype="dotdash",col = "red",lwd = 0.75)+
annotate(geom = 'text', label = "Pearson's r = 0.469", x = 0.02, y = 0.8, hjust = 0, vjust = 1,size = 8)+
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),text = element_text(size = 15),legend.position = "none")
q1plot
plot(allq1$gene_vcap,allq1$gene_mcf7,pch=20,xlim = c(0,0.8),cex = 0.5,ylim = c(0,0.8),xlab="VCAP Gene-level distance",ylab="MCF7 Gene-level distance",xaxs="i",yaxs="i")
View(allq2)
cor(allq2$gene_vcap,allq2$gene_mcf7)
q1plot <- ggplot(allq2,aes(x=gene_vcap,y = gene_mcf7)) +
geom_point(size = 0.1) + xlab("VCAP gene-level distance") + ylab("MCF7 gene-level distance") +
geom_vline(aes(xintercept=0.19),linetype="dotdash",col = "red",lwd = 0.75)+
geom_hline(aes(yintercept=0.2),linetype="dotdash",col = "red",lwd = 0.75)+
annotate(geom = 'text', label = "Pearson's r = 0.068", x = 0.02, y = 0.8, hjust = 0, vjust = 1,size = 8)+
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),text = element_text(size = 15),legend.position = "none")
q1plot
png(file="main_figures/figure_3/figure_3_q2.png",width=14,height=12,units = "cm",res=600)
q1plot
dev.off()
train_rest <- read.csv('../../Go distances/learning/data/mcf7rest/80dr_cold/train_rest.csv')
test <- read.csv('../learning/data/mcf7_augm/train_test_split/test.csv')
test$rdkit.x <- as.character(test$rdkit.x)
test$rdkit.y <- as.character(test$rdkit.y)
train <- read.csv('../learning/data/mcf7_augm/train_test_split/train.csv')
train$rdkit.x <- as.character(train$rdkit.x)
train$rdkit.y <- as.character(train$rdkit.y)
train_rest$rdkit.x <- as.character(train_rest$rdkit.x)
train_rest$rdkit.y <- as.character(train_rest$rdkit.y)
test$rdkit.x <- as.character(test$rdkit.x)
test$rdkit.y <- as.character(test$rdkit.y)
smis_train <- unique(c(train$rdkit.x,train$rdkit.y))
smis_train_rest <- unique(c(train_rest$rdkit.x,train_rest$rdkit.y))
smis_test <- unique(c(test$rdkit.x,test$rdkit.y))
ind <- which(!(smis_test %in% smis_train))
smis_test <- smis_test[ind]
library(AnnotationDbi)
remove <- smis_test[which(smis_test %in% smis_train_rest)]
which(smis_test %in% smis_train_rest)
test <- test %>% filter(!((rdkit.x %in% remove) | (rdkit.y %in% remove)))
library(tidyverse)
test <- test %>% filter(!((rdkit.x %in% remove) | (rdkit.y %in% remove)))
hist(test$value)
test <- read.csv('../learning/data/a375_augm/train_test_split/test.csv')
hist(test$value)
train_rest <- read.csv('../../Go distances/learning/data/pc3rest/80dr_cold/train_rest.csv')
train <- read.csv('../learning/data/pc3_augm/train_test_split/train.csv')
train$rdkit.x <- as.character(train$rdkit.x)
train$rdkit.y <- as.character(train$rdkit.y)
train_rest$rdkit.x <- as.character(train_rest$rdkit.x)
train_rest$rdkit.y <- as.character(train_rest$rdkit.y)
test <- read.csv('../learning/data/pc3_augm/train_test_split/test.csv')
test$rdkit.x <- as.character(test$rdkit.x)
test$rdkit.y <- as.character(test$rdkit.y)
smis_train <- unique(c(train$rdkit.x,train$rdkit.y))
smis_train_rest <- unique(c(train_rest$rdkit.x,train_rest$rdkit.y))
smis_test <- unique(c(test$rdkit.x,test$rdkit.y))
ind <- which(!(smis_test %in% smis_train))
smis_test <- smis_test[ind]
remove <- smis_test[which(smis_test %in% smis_train_rest)]
for (i in 1:74){
print(smis_test[i] %in% smis_train_rest)
}
train_rest <- read.csv('../../Go distances/learning/data/a375rest/80dr_cold/train_rest.csv')
train <- read.csv('../learning/data/a375_augm/train_test_split/train.csv')
train$rdkit.x <- as.character(train$rdkit.x)
train$rdkit.y <- as.character(train$rdkit.y)
train_rest$rdkit.x <- as.character(train_rest$rdkit.x)
train_rest$rdkit.y <- as.character(train_rest$rdkit.y)
test <- read.csv('../learning/data/a375_augm/train_test_split/test.csv')
test$rdkit.x <- as.character(test$rdkit.x)
test$rdkit.y <- as.character(test$rdkit.y)
smis_train <- unique(c(train$rdkit.x,train$rdkit.y))
smis_train_rest <- unique(c(train_rest$rdkit.x,train_rest$rdkit.y))
smis_test <- unique(c(test$rdkit.x,test$rdkit.y))
ind <- which(!(smis_test %in% smis_train))
smis_test <- smis_test[ind]
remove <- smis_test[which(smis_test %in% smis_train_rest)]
train_rest <- read.csv('../../Go distances/learning/data/vcaprest/80dr_cold/train_rest.csv')
train <- read.csv('../learning/data/vcap_augm/train_test_split/train.csv')
train$rdkit.x <- as.character(train$rdkit.x)
train$rdkit.y <- as.character(train$rdkit.y)
train_rest$rdkit.x <- as.character(train_rest$rdkit.x)
train_rest$rdkit.y <- as.character(train_rest$rdkit.y)
test <- read.csv('../learning/data/vcap_augm/train_test_split/test.csv')
test$rdkit.x <- as.character(test$rdkit.x)
test$rdkit.y <- as.character(test$rdkit.y)
smis_train <- unique(c(train$rdkit.x,train$rdkit.y))
smis_train_rest <- unique(c(train_rest$rdkit.x,train_rest$rdkit.y))
smis_test <- unique(c(test$rdkit.x,test$rdkit.y))
ind <- which(!(smis_test %in% smis_train))
smis_test <- smis_test[ind]
remove <- smis_test[which(smis_test %in% smis_train_rest)]
train_rest <- read.csv('../../Go distances/learning/data/vcaprest/80dr_cold/train_rest.csv')
train <- read.csv('../learning/data/vcap_augm/train_test_split/train.csv')
test <- read.csv('../learning/data/vcap_augm/train_test_split/test.csv')
smis_train <- unique(c(train$rdkit.x,train$rdkit.y))
train$rdkit.x <- as.character(train$rdkit.x)
train$rdkit.y <- as.character(train$rdkit.y)
train_rest$rdkit.x <- as.character(train_rest$rdkit.x)
train_rest$rdkit.y <- as.character(train_rest$rdkit.y)
test$rdkit.x <- as.character(test$rdkit.x)
test$rdkit.y <- as.character(test$rdkit.y)
smis_train <- unique(c(train$rdkit.x,train$rdkit.y))
smis_train_rest <- unique(c(train_rest$rdkit.x,train_rest$rdkit.y))
smis_test <- unique(c(test$rdkit.x,test$rdkit.y))
ind <- which(!(smis_test %in% smis_train))
smis_test <- smis_test[ind]
remove <- smis_test[which(smis_test %in% smis_train_rest)]
which(smis_test %in% smis_train_rest)
train_rest <- read.csv('../../Go distances/learning/data/mcf7rest/80dr_cold/train_rest.csv')
train <- read.csv('../learning/data/mcf7_augm/train_test_split/train.csv')
train$rdkit.x <- as.character(train$rdkit.x)
train$rdkit.y <- as.character(train$rdkit.y)
train_rest$rdkit.x <- as.character(train_rest$rdkit.x)
train_rest$rdkit.y <- as.character(train_rest$rdkit.y)
test <- read.csv('../learning/data/mcf7_augm/train_test_split/test.csv')
test$rdkit.x <- as.character(test$rdkit.x)
test$rdkit.y <- as.character(test$rdkit.y)
smis_train <- unique(c(train$rdkit.x,train$rdkit.y))
smis_train_rest <- unique(c(train_rest$rdkit.x,train_rest$rdkit.y))
smis_test <- unique(c(test$rdkit.x,test$rdkit.y))
ind <- which(!(smis_test %in% smis_train))
smis_test <- smis_test[ind]
remove <- smis_test[which(smis_test %in% smis_train_rest)]
remove <- smis_test[which(smis_train %in% smis_train_rest)]
cmap_smiles <- read.csv('../../Smiles-Similarities/all_cmap_smiles.csv')
View(cmap_smiles)
ecfp4 <- read.csv('../../Smiles-Similarities/cmap_all_ecfp4.csv')
colnames(ecfp4)
colnames(ecfp4)[1]
head(ecfp4)
ecfp4$X[1]
ecfp4$X[100]
ecfp4 <- ecfp4[,-1]
rownames(ecfp4) <- cmap_smiles$smiles
colnames(ecfp4) <- cmap_smiles$smiles
train_rest <- read.csv('../../Go distances/learning/data/mcf7rest/80dr_cold/train_rest.csv')
train <- read.csv('../learning/data/mcf7_augm/train_test_split/train.csv')
train$rdkit.x <- as.character(train$rdkit.x)
train$rdkit.y <- as.character(train$rdkit.y)
train_rest$rdkit.x <- as.character(train_rest$rdkit.x)
train_rest$rdkit.y <- as.character(train_rest$rdkit.y)
test <- read.csv('../learning/data/mcf7_augm/train_test_split/test.csv')
test$rdkit.x <- as.character(test$rdkit.x)
test$rdkit.y <- as.character(test$rdkit.y)
smis_train <- unique(c(train$rdkit.x,train$rdkit.y))
smis_train_rest <- unique(c(train_rest$rdkit.x,train_rest$rdkit.y))
smis_test <- unique(c(test$rdkit.x,test$rdkit.y))
ind <- which(!(smis_test %in% smis_train))
smis_test <- smis_test[ind]
remove <- smis_test[which(smis_test %in% smis_train_rest)]
smis_test[1]
ecfp4["C=C(CC)C(=O)c1ccc(OCC(=O)O)c(Cl)c1Cl"]
ecfp4["C=C(CC)C(=O)c1ccc(OCC(=O)O)c(Cl)c1Cl",1]
smis_test[2]
ecfp4["C=C(CC)C(=O)c1ccc(OCC(=O)O)c(Cl)c1Cl","COC1=C2CC(C)CC(OC)C(O)C(C)/C=C(\\C)C(OC(N)=O)C(OC)/C=C/C=C(\\C)C(=O)NC(=CC1=O)C2=O"]
ecfp4["C=C(CC)C(=O)c1ccc(OCC(=O)O)c(Cl)c1Cl",c("COC1=C2CC(C)CC(OC)C(O)C(C)/C=C(\\C)C(OC(N)=O)C(OC)/C=C/C=C(\\C)C(=O)NC(=CC1=O)C2=O","C=C(CC)C(=O)c1ccc(OCC(=O)O)c(Cl)c1Cl")]
t <- ecfp4["C=C(CC)C(=O)c1ccc(OCC(=O)O)c(Cl)c1Cl",c("COC1=C2CC(C)CC(OC)C(O)C(C)/C=C(\\C)C(OC(N)=O)C(OC)/C=C/C=C(\\C)C(=O)NC(=CC1=O)C2=O","C=C(CC)C(=O)c1ccc(OCC(=O)O)c(Cl)c1Cl")]
View(t)
max(ecfp4["C=C(CC)C(=O)c1ccc(OCC(=O)O)c(Cl)c1Cl",c("COC1=C2CC(C)CC(OC)C(O)C(C)/C=C(\\C)C(OC(N)=O)C(OC)/C=C/C=C(\\C)C(=O)NC(=CC1=O)C2=O","C=C(CC)C(=O)c1ccc(OCC(=O)O)c(Cl)c1Cl")])
remove <- NULL
k <- 0
for (i in 1:length(smis_test)){
max_sim <- max(smis_test[i],smis_train_rest)
if (max_sim>=0.85){
k <- k+1
remove[k] <- smis_test[i]
}
}
t <- ecfp4(smis_test,smis_train_rest)
remove <- NULL
k <- 0
for (i in 1:length(smis_test)){
max_sim <- max(ecfp4[smis_test[i],smis_train_rest])
if (max_sim>=0.85){
k <- k+1
remove[k] <- smis_test[i]
}
}
t <- ecfp4[smis_test,]
t <- ecfp4[smis_test,smis_train]
t <- ecfp4[smis_test,smis_train_rest]
length(which(smis_train_rest %in% colnames(ecfp4)))
t <- ecfp4[smis_test,smis_train_rest[1]]
t <- ecfp4[smis_test,c(smis_train_rest[1],smis_train_rest[2])]
cmap_smiles$smiles <- as.character(cmap_smiles)
View(cmap_smiles)
cmap_smiles$smiles <- as.character(cmap_smiles$smiles)
rownames(ecfp4) <- cmap_smiles$smiles
colnames(ecfp4) <- cmap_smiles$smiles
remove <- NULL
k <- 0
for (i in 1:length(smis_test)){
max_sim <- max(ecfp4[smis_test[i],smis_train_rest])
if (max_sim>=0.85){
k <- k+1
remove[k] <- smis_test[i]
}
}
ecfp4[smis_test[i],smis_train_rest]
ecfp4[smis_test[i],smis_train_rest[1]]
for (j in smis_train_rest){
print(ecfp4[smis_test[i],smis_train_rest[j]])
}
for (j in 1:length(smis_train_rest)){
print(ecfp4[smis_test[i],smis_train_rest[j]])
}
ecfp4[smis_test[i],c(smis_train_rest)]
ecfp4_new <- ecfp4[smis_test,smis_train_rest]
ecfp4_new <- ecfp4[,smis_train_rest]
ecfp4_new <- ecfp4[,smis_train_rest[1]]
ecfp4_new <- ecfp4[,smis_train_rest[2]]
ecfp4_new <- ecfp4[smis_train_rest,]
ecfp4_new <- ecfp4[smis_train_rest,smis_test]
remove <- NULL
k <- 0
ecfp4_new <- ecfp4[smis_train_rest,smis_test]
View(ecfp4_new)
for (i in 1:length(smis_test)){
max_sim <- max(ecfp4[,smis_test[i]])
if (max_sim>=0.85){
k <- k+1
remove[k] <- smis_test[i]
}
}
for (i in 1:length(smis_test)){
max_sim <- max(ecfp4_new[,smis_test[i]])
if (max_sim>=0.85){
k <- k+1
remove[k] <- smis_test[i]
}
}
remove <- NULL
k <- 0
ecfp4_new <- ecfp4[smis_train_rest,smis_test]
max_sim <- max(ecfp4_new[,smis_test[i]])
t <- ecfp4_new[,smis_test[i]]
max(t)
t
hist(t)
max(t)
min(t)
min(as.numeric(t))
is.na(t)
all(is.na(t))
all(!is.na(t))
ii <- which(is.na(t))
ecfp4_new[ii,1]
View(ecfp4_new)
max_sim <- max(ecfp4_new[,i],na.rm = T)
remove <- NULL
k <- 0
ecfp4_new <- ecfp4[smis_train_rest,smis_test]
for (i in 1:length(smis_test)){
max_sim <- max(ecfp4_new[,i],na.rm = T)
if (max_sim>=0.85){
k <- k+1
remove[k] <- smis_test[i]
}
}
write_csv('../learning/data/mcf7_augm/train_test_split/test.csv')
test <- test %>% filter(!((rdkit.x %in% remove) | (rdkit.y %in% remove)))
write_csv(test,'../learning/data/mcf7_augm/train_test_split/test.csv')
train_rest <- read.csv('../../Go distances/learning/data/vcaprest/80dr_cold/train_rest.csv')
train <- read.csv('../learning/data/vcap_augm/train_test_split/train.csv')
train$rdkit.x <- as.character(train$rdkit.x)
train$rdkit.y <- as.character(train$rdkit.y)
train_rest$rdkit.x <- as.character(train_rest$rdkit.x)
train_rest$rdkit.y <- as.character(train_rest$rdkit.y)
test <- read.csv('../learning/data/vcap_augm/train_test_split/test.csv')
test$rdkit.x <- as.character(test$rdkit.x)
test$rdkit.y <- as.character(test$rdkit.y)
smis_train <- unique(c(train$rdkit.x,train$rdkit.y))
smis_train_rest <- unique(c(train_rest$rdkit.x,train_rest$rdkit.y))
smis_test <- unique(c(test$rdkit.x,test$rdkit.y))
ind <- which(!(smis_test %in% smis_train))
smis_test <- smis_test[ind]
remove <- smis_test[which(smis_test %in% smis_train_rest)]
remove <- NULL
k <- 0
ecfp4_new <- ecfp4[smis_train_rest,smis_test]
for (i in 1:length(smis_test)){
max_sim <- max(ecfp4_new[,i],na.rm = T)
if (max_sim>=0.85){
k <- k+1
remove[k] <- smis_test[i]
}
}
test <- test %>% filter(!((rdkit.x %in% remove) | (rdkit.y %in% remove)))
write_csv(test,'../learning/data/vcap_augm/train_test_split/test.csv')
train_rest <- read.csv('../../Go distances/learning/data/a375rest/80dr_cold/train_rest.csv')
train <- read.csv('../learning/data/a375_augm/train_test_split/train.csv')
train$rdkit.x <- as.character(train$rdkit.x)
train$rdkit.y <- as.character(train$rdkit.y)
train_rest$rdkit.x <- as.character(train_rest$rdkit.x)
train_rest$rdkit.y <- as.character(train_rest$rdkit.y)
test <- read.csv('../learning/data/a375_augm/train_test_split/test.csv')
test$rdkit.x <- as.character(test$rdkit.x)
test$rdkit.y <- as.character(test$rdkit.y)
smis_train <- unique(c(train$rdkit.x,train$rdkit.y))
smis_train_rest <- unique(c(train_rest$rdkit.x,train_rest$rdkit.y))
smis_test <- unique(c(test$rdkit.x,test$rdkit.y))
ind <- which(!(smis_test %in% smis_train))
smis_test <- smis_test[ind]
remove <- smis_test[which(smis_test %in% smis_train_rest)]
remove <- NULL
k <- 0
ecfp4_new <- ecfp4[smis_train_rest,smis_test]
for (i in 1:length(smis_test)){
max_sim <- max(ecfp4_new[,i],na.rm = T)
if (max_sim>=0.85){
k <- k+1
remove[k] <- smis_test[i]
}
}
test <- test %>% filter(!((rdkit.x %in% remove) | (rdkit.y %in% remove)))
write_csv(test,'../learning/data/a375_augm/train_test_split/test.csv')
train_rest <- read.csv('../../Go distances/learning/data/pc3rest/80dr_cold/train_rest.csv')
train <- read.csv('../learning/data/pc3_augm/train_test_split/train.csv')
train$rdkit.x <- as.character(train$rdkit.x)
train$rdkit.y <- as.character(train$rdkit.y)
train_rest$rdkit.x <- as.character(train_rest$rdkit.x)
train_rest$rdkit.y <- as.character(train_rest$rdkit.y)
test <- read.csv('../learning/data/pc3_augm/train_test_split/test.csv')
test$rdkit.x <- as.character(test$rdkit.x)
test$rdkit.y <- as.character(test$rdkit.y)
smis_train <- unique(c(train$rdkit.x,train$rdkit.y))
smis_train_rest <- unique(c(train_rest$rdkit.x,train_rest$rdkit.y))
smis_test <- unique(c(test$rdkit.x,test$rdkit.y))
ind <- which(!(smis_test %in% smis_train))
smis_test <- smis_test[ind]
remove <- smis_test[which(smis_test %in% smis_train_rest)]
remove <- NULL
k <- 0
ecfp4_new <- ecfp4[smis_train_rest,smis_test]
for (i in 1:length(smis_test)){
max_sim <- max(ecfp4_new[,i],na.rm = T)
if (max_sim>=0.85){
k <- k+1
remove[k] <- smis_test[i]
}
}
test <- test %>% filter(!((rdkit.x %in% remove) | (rdkit.y %in% remove)))
write_csv(test,'../learning/data/pc3_augm/train_test_split/test.csv')
