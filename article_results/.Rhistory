})
yvals <- unlist(lapply(dens, function(x) {
x$y
}))
plot(0, type = "n", xlim = xlim, ylim = ylim, ylab = ylab,
...)
out <- mapply(dens, rep(col, length = length(dens)), rep(lwd,
length = length(dens)), rep(lty, length = length(dens)),
FUN = function(x, col, lwd, lty) {
lines(x, col = col, lwd = lwd, lty = lty)
})
}
q2_mcf7_distances <- rep_mean_q1
multi2(list(q1_mcf7_distances[,1]/2,q2_mcf7_distances[,1]/2),xlab = "Gene-level distance", xlim = c(0,0.7),xaxs="i",yaxs="i", ylim = c(0,6))
title("A", adj = 0)
legend("topright",
legend = c("Q1 duplicate pairs (n = 20)", "Q2 duplicate pairs (n = 19)"),
col = c('black',
'red'),
lty = c(1,1),
bty = "o",
pt.cex = 1.5,
cex = 0.8,
text.col = "black",
horiz = F ,
inset = c(0.01, 0.01))
data <- readRDS("C:/Users/user/Documents/deepSIBA/preprocessing/data_preprocessing/processed_data/initial_signatures_with_mycranks.rds")
data <- readRDS("C:/Users/user/Documents/deepSIBA/preprocessing/data_preprocessing/processed_data/cmap_with_RDkits_initial.rds")
gos <- go
thresholds <- c(10,20,30,40,50)
thresholds2 <- c(5,10,15,20,25)
vcap_q2 <- data %>%
filter(cell_id == "VCAP") %>%
#filter(pert_time == "24") %>%
filter(quality == "2")
mcf7_q2 <- data %>%
filter(cell_id == "MCF7") %>%
#filter(pert_time == "24") %>%
filter(quality == "2")
vcap_q2 <- vcap_q2[which(vcap_q2$pert_id %in% mcf7_q2$pert_id),]
mcf7_q2 <- mcf7_q2[which(mcf7_q2$pert_id %in% vcap_q2$pert_id),]
genes_vcap <- get_cmap_signatures(cmap_path_to_gctx = ds_path,sig_ids = vcap_q2$sig_id,landmark = TRUE,landmark_df = landmark)
genes_vcap <- get_cmap_signatures(cmap_path_to_gctx = ds_path,sig_ids = as.character(vcap_q2$sig_id),landmark = TRUE,landmark_df = landmark)
genes_mcf7 <- get_cmap_signatures(cmap_path_to_gctx = ds_path,sig_ids = mcf7_q2$sig_id,landmark = TRUE,landmark_df = landmark)
View(vcap_q2)
length(unique(vcap_q2$sig_id))
data <- readRDS("C:/Users/user/Documents/deepSIBA/preprocessing/data_preprocessing/processed_data/initial_signatures_with_mycranks.rds")
gos <- go
thresholds <- c(10,20,30,40,50)
thresholds2 <- c(5,10,15,20,25)
vcap_q2 <- data %>%
filter(cell_id == "VCAP") %>%
#filter(pert_time == "24") %>%
filter(quality == "2")
mcf7_q2 <- data %>%
filter(cell_id == "MCF7") %>%
#filter(pert_time == "24") %>%
filter(quality == "2")
vcap_q2 <- vcap_q2[which(vcap_q2$pert_id %in% mcf7_q2$pert_id),]
mcf7_q2 <- mcf7_q2[which(mcf7_q2$pert_id %in% vcap_q2$pert_id),]
genes_vcap <- get_cmap_signatures(cmap_path_to_gctx = ds_path,sig_ids = as.character(vcap_q2$sig_id),landmark = TRUE,landmark_df = landmark)
genes_mcf7 <- get_cmap_signatures(cmap_path_to_gctx = ds_path,sig_ids = mcf7_q2$sig_id,landmark = TRUE,landmark_df = landmark)
thresholds <- c(10,20,30,40,50)
dist_all_vcap_q2 <- NULL
plot(allq2$gene_vcap,allq2$gene_mcf7,pch=20,xlim = c(0,0.8),cex = 0.5,ylim = c(0,0.8),xlab="VCAP Gene-level distance",ylab="MCF7 Gene-level distance",xaxs="i",yaxs="i")
allq1 <- readRDS("C:/Users/user/Documents/deepSIBA/article_results/figure_3/data/q1_res_fig1.rds")
allq2 <- readRDS("C:/Users/user/Documents/deepSIBA/article_results/figure_3/data/q2_res_fig1.rds")
plot(allq2$gene_vcap,allq2$gene_mcf7,pch=20,xlim = c(0,0.8),cex = 0.5,ylim = c(0,0.8),xlab="VCAP Gene-level distance",ylab="MCF7 Gene-level distance",xaxs="i",yaxs="i")
plot(allq1$gene_vcap,allq1$gene_mcf7,pch=20,xlim = c(0,0.8),cex = 0.5,ylim = c(0,0.8),xlab="VCAP Gene-level distance",ylab="MCF7 Gene-level distance",xaxs="i",yaxs="i")
kd <- readRDS("C:/Users/user/Documents/deepSIBA/article_results/figure_extra_data/figure_4/tf_kd_cgs.rds")
# set path to cmap gctx file
ds_path <- "C:/Users/user/Documents/phd/GSE92742_Broad_LINCS_Level5_COMPZ.MODZ_n473647x12328.gctx"
landmark <- read_tsv(file = "C:/Users/user/Documents/deepSIBA/preprocessing/data_preprocessing/cmap/cmap_landmark_genes.txt")
kd <- readRDS("C:/Users/user/Documents/deepSIBA/article_results/figure_extra_data/figure_4/tf_kd_cgs.rds")
distance_scores <- function(num_table, threshold_count, names) {
library(GeneExpressionSignature)
library(tidyverse)
### rank the table
table_ranked <- apply(X = -num_table, MARGIN = 2, FUN = rank, ties.method = "random")
### create the phenodata
pheno2 <- as.data.frame(colnames(num_table))
rownames(pheno2) <- colnames(num_table)
pheno_new <- new("AnnotatedDataFrame",data=pheno2)
### create expression set
expr_set <- new("ExpressionSet",exprs = table_ranked, phenoData=pheno_new)
### calculate distances
distances <- ScoreGSEA(expr_set , threshold_count,"avg")
colnames(distances) <- names
rownames(distances) <- names
return(distances)
}
myc_kd <- kd %>% filter(pert_iname == "MYC")
profiles_myc <- get_cmap_signatures(cmap_path_to_gctx = ds_path, sig_ids = myc_kd$sig_id,landmark = T,landmark_df = landmark)
pathways_myc <- kegg_path_analysis(sig_ids = myc_kd$sig_id,cmap_path_to_gctx = ds_path,landmark_df = landmark)
pathways_myc <- pathways_myc[[1]]
gos <- readRDS("C:/Users/user/Documents/deepSIBA/preprocessing/data_preprocessing/utility/goterm_annotation.rds")
go_myc <- go_path_analysis(sig_ids = myc_kd$sig_id,cmap_path_to_gctx = ds_path,landmark_df = landmark,goterms = gos)
go_myc <- go_myc[[1]]
genes_dist <- distance_scores(num_table = profiles_myc,threshold_count = 25, names= myc_kd$cell_id)
paths_dist <- distance_scores(num_table = pathways_myc,threshold_count = 10, names = myc_kd$cell_id)
go_dist <- distance_scores(num_table = go_myc, threshold_count = 25, names = myc_kd$cell_id)
colnames(profiles_myc) <- myc_kd$cell_id
colnames(pathways_myc) <- myc_kd$cell_id
colnames(go_myc) <- myc_kd$cell_id
genes_cor <- round(cor(profiles_myc,method = "spearman"),2)
pathways_cor <- round(cor(pathways_myc,method = "spearman"),2)
go_cor <- round(cor(go_myc,method = "spearman"),2)
melted_genes_cor <- melt(genes_cor)
library(tidyverse)
library(viridis)
library(reshape2)
melted_genes_cor <- melt(genes_cor)
melted_genes_dist <- melt(genes_dist)
ggplot(data = melted_genes_dist, aes(x=Var1, y=Var2, fill= value/2)) +
geom_tile(show.legend = F)+scale_fill_viridis(limits = c(0,1),direction = -1) + labs( fill = "")+xlab("Cell line")+
ylab("Cell line") + ggtitle("A") +theme(plot.title = element_text(hjust=0))
melted_go_dist <- melt(go_dist)
ggplot(data = melted_go_dist, aes(x=Var1, y=Var2, fill= value/2)) +
geom_tile()+scale_fill_viridis(limits = c(0,1),direction = -1) +
labs( fill = "Distance") + xlab("Cell line")+ylab("Cell line")+
ggtitle("B") +theme(plot.title = element_text(hjust=0))
library(tidyverse)
library(MLmetrics)
mcf7 <- read.csv("C:/Users/user/Documents/deepSIBA/learning/data/mcf7/train_test_split/test.csv")
thresh <- seq(0.25,0.95,0.1)
cors <- NULL
ms_mcf7 <- NULL
prec_mcf7 <- NULL
for (i in 1:length(thresh)) {
filt <- mcf7 %>% filter(dist >= (thresh[i]-0.05)) %>% filter(dist <= (thresh[i]+0.05))
ms_mcf7[i] <- MSE(y_pred = filt$V1,y_true = filt$value)
#cors[i] <- cor(x = filt$V1,y = filt$value)
prec_mcf7[i] <- prec_eval(true = filt$value,pred = filt$V1,thresh = 0.2)
}
prec_eval <- function(true,pred,thresh){
dd <- cbind(true,pred)
dd <- as.data.frame(dd)
colnames(dd) <- c("true","pred")
tp <- length(which(dd$true<=thresh & dd$pred<=thresh))
pos <- length(which(dd$pred<=thresh))
prec <- tp/pos
return(prec)
}
for (i in 1:length(thresh)) {
filt <- mcf7 %>% filter(dist >= (thresh[i]-0.05)) %>% filter(dist <= (thresh[i]+0.05))
ms_mcf7[i] <- MSE(y_pred = filt$V1,y_true = filt$value)
#cors[i] <- cor(x = filt$V1,y = filt$value)
prec_mcf7[i] <- prec_eval(true = filt$value,pred = filt$V1,thresh = 0.2)
}
vcap <- read.csv("C:/Users/user/Documents/deepSIBA/learning/data/vcap/train_test_split/test.csv")
ms_vcap <- NULL
prec_vcap <- NULL
for (i in 1:length(thresh)) {
filt <- vcap %>% filter(dist >= (thresh[i]-0.05)) %>% filter(dist <= (thresh[i]+0.05))
ms_vcap[i] <- MSE(y_pred = filt$V1,y_true = filt$value)
#cors[i] <- cor(x = filt$V1,y = filt$value)
prec_vcap[i] <- prec_eval(true = filt$value,pred = filt$V1,thresh = 0.2)
}
a375 <- read.csv("C:/Users/user/Documents/deepSIBA/learning/data/a375/train_test_split/test.csv")
ms_a375 <- NULL
prec_a375 <- NULL
for (i in 1:length(thresh)) {
filt <- a375 %>% filter(dist >= (thresh[i]-0.05)) %>% filter(dist <= (thresh[i]+0.05))
ms_a375[i] <- MSE(y_pred = filt$V1,y_true = filt$value)
#cors[i] <- cor(x = filt$V1,y = filt$value)
prec_a375[i] <- prec_eval(true = filt$value,pred = filt$V1,thresh = 0.2)
}
pc3 <- read.csv("C:/Users/user/Documents/deepSIBA/learning/data/pc3/train_test_split/test.csv")
ms_pc3 <- NULL
prec_pc3 <- NULL
for (i in 1:length(thresh)) {
filt <- pc3 %>% filter(dist >= (thresh[i]-0.05)) %>% filter(dist <= (thresh[i]+0.05))
ms_pc3[i] <- MSE(y_pred = filt$V1,y_true = filt$value)
#cors[i] <- cor(x = filt$V1,y = filt$value)
prec_pc3[i] <- prec_eval(true = filt$value,pred = filt$V1,thresh = 0.2)
}
plot(thresh,ms_pc3,ylim = c(0,0.045),"o",xlim = c(0.247,0.953),col = "black",xlab = "Structural distance range",
ylab = "MSE" ,lwd = 1,xaxt = "n",lty = 5,pch = 1,,xaxs = "i",yaxs="i",cex = 0.6)
axis(1, at=seq(0.25,0.95,0.1), labels=c("[0.2,0.3]","[0.3,0.4]","[0.4,0.5]",
"[0.5,0.6]","[0.6,0.7]","[0.7,0.8]","[0.8,0.9]","[0.9,1.0]"),cex.axis = 0.8,xaxs = "i")
lines(thresh,ms_mcf7,col = "#e41a1c",lwd = 1.7,type = "o",lty = 5,pch = 2,cex = 0.6)
lines(thresh,ms_a375,col = "#4daf4a",lwd = 1.7, type = "o",lty = 2 , pch = 3,cex = 0.6)
lines(thresh,ms_vcap,col = "#377eb8",lwd = 1.7, type = "o",lty = 5,pch = 4,cex = 0.6)
title("A",adj = 0)
legend("topleft",
legend = c("PC3", "VCAP", "A375","MCF7"),
col = c('black',
'#377eb8',"#4daf4a","#e41a1c"),pch =c(1,4,3,2),
pt.cex = 0.6, lwd = 0.8,
cex = 0.6,
text.col = "black",
horiz = F )
plot(thresh,prec_pc3,ylim = c(0,1.1),"o",xlim = c(0.25,0.95),col = "black",xlab = "Structural distance range",
ylab = "Precision" ,lwd = 1.7,xaxt = "n",lty = 5,pch = 1,yaxs="i",cex = 0.6)
lines(thresh,c(NaN,1,1,1,1,NaN,NaN,NaN),col = "black",lwd = 1.7,type = "l",lty = 5)
axis(1, at=seq(0.25,0.95,0.1), labels=c("[0.2,0.3]","[0.3,0.4]","[0.4,0.5]",
"[0.5,0.6]","[0.6,0.7]","[0.7,0.8]","[0.8,0.9]","[0.9,1.0]"),cex.axis = 0.8,xaxs = "i")
lines(thresh,prec_mcf7,col = "#e41a1c",lwd = 1.7,type = "o",lty = 5,pch = 2,cex = 0.6)
lines(thresh,prec_a375,col = "#4daf4a",lwd = 1.7, type = "o",lty = 2 , pch = 3,cex = 0.6)
lines(thresh,prec_vcap,col = "#377eb8",lwd = 1.7, type = "o",lty = 5,pch = 4,cex = 0.6)
title("B",adj = 0)
legend("topleft",
legend = c("PC3", "VCAP", "A375","MCF7"),
col = c('black',
'#377eb8',"#4daf4a","#e41a1c"),pch =c(1,4,3,2),
pt.cex = 0.6, lwd = 0.8,
cex = 0.6,
text.col = "black",
horiz = F )
mcf7$cv <- mcf7$sigma_star/mcf7$V1
thresh_pr_mcf7 <- seq(0.23,0.4,0.01)
prec_mcf7 <- NULL
n_mcf7 <- NULL
for (i in 1:length(thresh_pr_mcf7)) {
filt <- mcf7 %>% filter(cv <= thresh_pr_mcf7[i])
prec_mcf7[i] <- prec_eval(true = filt$value,pred = filt$V1,thresh = 0.2)
n_mcf7[i] <- length(which(filt$V1<=0.2))
}
thresh_ms_mcf7 <- c(seq(0.14,0.158,0.001),seq(0.16,0.25,0.01))
ms_mcf7 <- NULL
for (i in 1:length(thresh_ms_mcf7)) {
filt <- mcf7 %>% filter(cv <= thresh_ms_mcf7[i])
ms_mcf7[i] <- MSE(y_pred = filt$V1,y_true = filt$value)
}
pc3$cv <- pc3$sigma_star/pc3$V1
thresh_pr_pc3 <- seq(0.23,0.4,0.01)
prec_pc3 <- NULL
n_pc3 <- NULL
for (i in 1:length(thresh_pr_pc3)) {
filt <- pc3 %>% filter(cv <= thresh_pr_pc3[i])
prec_pc3[i] <- prec_eval(true = filt$value,pred = filt$V1,thresh = 0.2)
}
thresh_ms_pc3 <- c(seq(0.134,0.158,0.001),seq(0.16,0.25,0.01))
ms_pc3 <- NULL
for (i in 1:length(thresh_ms_pc3)) {
filt <- pc3 %>% filter(cv <= thresh_ms_pc3[i])
ms_pc3[i] <- MSE(y_pred = filt$V1,y_true = filt$value)
}
a375$cv <- a375$sigma_star/a375$V1
thresh_pr_a375 <- seq(0.23,0.4,0.01)
prec_a375 <- NULL
for (i in 1:length(thresh_pr_a375)) {
filt <- a375 %>% filter(cv <= thresh_pr_a375[i])
prec_a375[i] <- prec_eval(true = filt$value,pred = filt$V1,thresh = 0.2)
}
thresh_ms_a375 <- c(seq(0.13,0.158,0.002),seq(0.16,0.25,0.01))
ms_a375 <- NULL
for (i in 1:length(thresh_ms_a375)) {
filt <- a375 %>% filter(cv <= thresh_ms_a375[i])
ms_a375[i] <- MSE(y_pred = filt$V1,y_true = filt$value)
}
vcap$cv <- vcap$sigma_star/vcap$V1
thresh_pr_vcap <- seq(0.23,0.4,0.01)
prec_vcap <- NULL
n_vcap <- NULL
for (i in 1:length(thresh_pr_vcap)) {
filt <- vcap %>% filter(cv <= thresh_pr_vcap[i])
prec_vcap[i] <- prec_eval(true = filt$value,pred = filt$V1,thresh = 0.2)
n_vcap[i] <- length(which(filt$V1<=0.2))
}
thresh_ms_vcap <- c(seq(0.14,0.158,0.001),seq(0.16,0.25,0.01))
ms_vcap <- NULL
for (i in 1:length(thresh_ms_vcap)) {
filt <- vcap %>% filter(cv <= thresh_ms_vcap[i])
ms_vcap[i] <- MSE(y_pred = filt$V1,y_true = filt$value)
}
plot(thresh_ms_pc3,100*ms_pc3/max(ms_pc3,na.rm=T),ylim = c(0,100),"o",xlim = c(0.13,0.25),col = "black",xlab = "CV threshold",
ylab = "MSE %" ,lwd = 1,lty = 5,pch = 1,cex = 0.2,yaxs="i")
lines(thresh_ms_mcf7,100*ms_mcf7/max(ms_mcf7,na.rm=T),col = "#e41a1c",lwd = 1,type = "o",lty = 5,pch = 2,cex = 0.2)
lines(thresh_ms_a375,100*ms_a375/max(ms_a375,na.rm=T),col = "#4daf4a",lwd = 1, type = "o",lty = 2 , pch = 3,cex = 0.2)
lines(thresh_ms_vcap,100*ms_vcap/max(ms_vcap,na.rm=T),col = "#377eb8",lwd = 1, type = "o",lty = 5,pch = 4,cex = 0.2)
title("C",adj = 0)
legend("topleft",
legend = c("PC3", "VCAP", "A375","MCF7"),
col = c('black',
'#377eb8',"#4daf4a","#e41a1c"),pch =c(1,4,3,2),
pt.cex = 0.5, lwd = 0.8,
cex = 0.55,
text.col = "black",
horiz = F )
png(file="result_fig3d.png",width=7,height=6,units = "in",res = 300)
plot(thresh_pr_pc3,prec_pc3,ylim = c(0.5,1.01),"o",xlim = c(0.23,0.3),col = "black",xlab = "CV threshold",
ylab = "Precision" ,lwd = 1,lty = 5,pch = 1,cex = 0.2,yaxs="i")
dev.off()
dev.off()
plot(thresh_pr_pc3,prec_pc3,ylim = c(0.5,1.01),"o",xlim = c(0.23,0.3),col = "black",xlab = "CV threshold",
ylab = "Precision" ,lwd = 1,lty = 5,pch = 1,cex = 0.2,yaxs="i")
lines(thresh_pr_mcf7,prec_mcf7,col = "#e41a1c",lwd = 1,type = "o",lty = 5,pch = 2,cex = 0.2)
lines(thresh_pr_a375,prec_a375,col = "#4daf4a",lwd = 1, type = "o",lty = 2 , pch = 3,cex = 0.2)
lines(thresh_pr_vcap,prec_vcap,col = "#377eb8",lwd = 1, type = "o",lty = 5,pch = 4,cex = 0.2)
title("D",adj = 0)
legend("topleft",
legend = c("PC3", "VCAP", "A375","MCF7"),
col = c('black',
'#377eb8',"#4daf4a","#e41a1c"),pch =c(1,4,3,2),
pt.cex = 0.5, lwd = 0.8,
cex = 0.55,
text.col = "black",
horiz = F )
library(tidyverse)
library(MLmetrics)
prec_eval <- function(true,pred,thresh){
dd <- cbind(true,pred)
dd <- as.data.frame(dd)
colnames(dd) <- c("true","pred")
tp <- length(which(dd$true<=thresh & dd$pred<=thresh))
pos <- length(which(dd$pred<=thresh))
prec <- tp/pos
return(prec)
}
library(tidyverse)
library(MLmetrics)
prec_eval <- function(true,pred,thresh){
dd <- cbind(true,pred)
dd <- as.data.frame(dd)
colnames(dd) <- c("true","pred")
tp <- length(which(dd$true<=thresh & dd$pred<=thresh))
pos <- length(which(dd$pred<=thresh))
prec <- tp/pos
return(prec)
}
a3752 <- read.csv("C:/Users/user/Documents/deepSIBA/article_results/figure_extra_data/figure_6/val_fixed.csv")
mu <- read.csv("C:/Users/user/Documents/deepSIBA/article_results/figure_extra_data/figure_6/mu_star3.csv",header = F)
sigma <- read.csv("C:/Users/user/Documents/deepSIBA/article_results/figure_extra_data/figure_6/sigma_star3.csv",header = F)
a3752$V1 <- mu$V1
a3752$value <- a3752$value/2
a3752$sigma <- sigma$V1
a3752$cv <- a3752$sigma/a3752$V1
thresh_pr_a3752 <- seq(0.15,0.25,0.01)
prec_a3752 <- NULL
n_a3752 <- NULL
#ms_a3752 <- NULL
for (i in 1:length(thresh_pr_a3752)) {
filt <- a3752 %>% filter(cv <= thresh_pr_a3752[i])
prec_a3752[i] <- prec_eval(true = filt$value,pred = filt$V1,thresh = 0.22)
n_a3752[i] <- length(which(filt$V1<=0.22))
#ms_a3752[i] <- MSE(y_pred = filt$V1,y_true = filt$value)
}
plot(thresh_pr_a3752,prec_a3752)
thresh_ms_a3752 <- c(seq(0.12,0.15,0.005),seq(0.16,0.25,0.01))
ms_a3752 <- NULL
for (i in 1:length(thresh_ms_a3752)) {
filt <- a3752 %>% filter(cv <= thresh_ms_a3752[i])
#prec_a3752[i] <- prec_eval(true = filt$value,pred = filt$V1,thresh = 0.22)
#n_a3752[i] <- length(which(filt$V1<=0.22))
ms_a3752[i] <- MSE(y_pred = filt$V1,y_true = filt$value)
}
thresh_cor_a3752 <- seq(0.12,0.25,0.01)
cor_a3752 <- NULL
for (i in 1:length(thresh_cor_a3752)) {
filt <- a3752 %>% filter(cv <= thresh_cor_a3752[i])
#prec_a3752[i] <- prec_eval(true = filt$value,pred = filt$V1,thresh = 0.22)
#n_a3752[i] <- length(which(filt$V1<=0.22))
cor_a3752[i] <- cor(filt$V1,filt$value)
}
plot(thresh_pr_a3752,prec_a3752,ylim = c(0,1.1),"o",xlim = c(0.15,0.25),xlab = "CV threshold",
ylab = "Precision" ,lwd = 1.5,lty = 2,pch = 3,cex = 1,yaxs = "i", col = "black")
title("B", adj = 0)
dev.off()
### result figure 4a
### fix the old val data
sims <- read.csv("C:/Users/user/Documents/deepSIBA/article_results/figure_extra_data/figure_6/train_val_sims.csv")
sims <- sims[,-1]
sims_cat <- sims >0.3
sims_cat <- sims_cat+0
cold <- read.csv("C:/Users/user/Documents/deepSIBA/article_results/figure_extra_data/figure_6/valsmiles.csv")
cold <- as.character(cold$x)
keep <- cold[which(colSums(sims_cat) == 0)]
hist(apply(sims[,which(colSums(sims_cat) == 0)],2,max),col = "grey",xlim = c(0,1),ylim = c(0,25),xlab = "Maximum structural similarity",main = NULL)
# read training set of mcf7 with BP and ecfp4 distances
new <- read.csv("C:/Users/user/Documents/deepSIBA/article_results/table_extra_data/table_1/train_with_ecfp4.csv")
new$value <- new$value/2
# read gene level distances
genes <- readRDS("C:/Users/user/Documents/deepSIBA/article_results/table_extra_data/table_1/gene_distances.rds")
new <- left_join(new,genes,by=c("Var1"="Var1","Var2"="Var2"))
dist01 <- new %>% filter(dist <= 0.1)
thresh <- seq(0,1,0.1)
ppg <- NULL
ppbp <- NULL
for (i in 1:length(thresh)) {
ng <- length(which(dist01$value.y<=thresh[i]))
nb <- length(which(dist01$value.x<=thresh[i]))
ppg[i] <- ng/nrow(dist01)
ppbp[i] <- nb/nrow(dist01)
}
plot(thresh,ppbp,type = "l")
lines(thresh,ppg,col = "red")
0.05*2*10^6
# for testing
library(tidyverse)
get_com_sigs_2 <- function(gos,pa,tb_go=10,tb_pa=10, sig_ids) {
#library(tidyverse)
#library(rhdf5)
#library(org.Hs.eg.db)
# load the GO library
#library(GO.db)
# extract a named vector of all terms
#goterms <- Term(GOTERM)
#goterms <- as.data.frame(goterms) %>% rownames_to_column("id")
go <- gos[,sig_ids]
go <- apply(go,MARGIN = 2,FUN = rank,ties.method = "random")
majority <- function(x,nrow,tb){
# work for bot
bot <- sum((x<=tb + 0))/length(x)
top <- sum((x>=(nrow-tb+1)))/length(x)
return(cbind(bot,top))
}
go_tb <- t(apply(go,MARGIN = 1,FUN = majority,nrow = nrow(go),tb = tb_go))
colnames(go_tb) <- c("bot","top")
go_bot <- go_tb[,1]
go_top <- go_tb[,2]
pathways <- pa[,sig_ids]
pathways <- apply(pathways,MARGIN = 2,FUN = rank,ties.method = "random")
pa_tb <- t(apply(pathways,MARGIN = 1,FUN = majority,nrow = nrow(pathways),tb = tb_pa))
colnames(pa_tb) <- c("bot","top")
pa_bot <- pa_tb[,1]
pa_top <- pa_tb[,2]
#Return output list
output <- list(go_bot,go_top,pa_bot,pa_top)
names(output) <- c("BotGos","TopGos","BotPAs","TopPAs")
return(output)
}
#need to add sig+rdkit dataframe (mcf7) and goterms name to id mapping
# read mcf7 signatures
mcf7 <- readRDS("C:/Users/user/Documents/deepSIBA/article_results/table_extra_data/table_6/mcf7_all_sigs.rds")
# read pert to rdkit
pert <- readRDS("C:/Users/user/Documents/deepSIBA/preprocessing/data_preprocessing/utility/pert_id_to_rdkit.rds")
mcf7 <- left_join(mcf7,pert)
mcf7 <- mcf7 %>% filter(!is.na(rdkit))
# read go term scores and pathway scores
path_pa <- "C:/Users/user/Documents/deepSIBA/article_results/table_extra_data/table_6/nes_compounds_all.rds"
path_gos <- "C:/Users/user/Documents/deepSIBA/article_results/table_extra_data/table_6/all_compounds_go.rds"
pathway_scores <- readRDS(path_pa)
go_scores <- readRDS(path_gos)
query_val <- read.csv("C:/Users/user/Documents/deepSIBA/article_results/table_extra_data/table_6/test_mcf7.csv")
thresh <- 0.2
query_val <- query_val %>% filter(preds <= thresh)
# for each drug in the query count up the similars
query_val <- query_val %>% group_by(x2) %>% mutate(counts = n_distinct(x1)) %>% ungroup()
# set minimum number of similars for go term overlap
no_overlap <- 5
query_val <- query_val %>% filter(counts >= no_overlap)
# what query drugs are left
val_drugs_left <- unique(as.character(query_val$x2))
length(val_drugs_left)
neighbors <- c(5,8,10,12,15,20,25,30,35,40,50,60,70,85,100,120,150,175,200,225)
# top bot gos and pas
tb_go <- 170
tb_pa <- 10
results_train <- NULL
results <- NULL
dist_pb <- readRDS("C:/Users/user/Documents/deepSIBA/article_results/table_extra_data/table_6/distributions_pb.rds")
dist_pt <- readRDS("C:/Users/user/Documents/deepSIBA/article_results/table_extra_data/table_6/distributions_pt.rds")
dist_gb <- readRDS("C:/Users/user/Documents/deepSIBA/article_results/table_extra_data/table_6/distributions_gb.rds")
dist_gt <- readRDS("C:/Users/user/Documents/deepSIBA/article_results/table_extra_data/table_6/distributions_gt.rds")
for (i in 1:length(val_drugs_left)){
# keep in filt the similars of each query in the loop
filt <- query_val[which(query_val$x2 == val_drugs_left[i]),]
# add rdkit and sig ids in filt
filt <- left_join(filt,mcf7, by = c("x1"="rdkit"))
diff <- abs(nrow(filt) - neighbors)
pos <- which(diff==min(diff))[1]
# now get the common pas and gos for the similars of the query
train_overlap <- get_com_sigs_2(gos = go_scores,
pa = pathway_scores,sig_ids = filt$sig_id,
tb_go = tb_go, tb_pa = tb_pa)
gb_p <- NULL
gt_p <- NULL
for (k in 1:length(train_overlap$BotGos)) {
gb_p[k] <- length(which(dist_gb[[pos]][k,]>=train_overlap$BotGos[k]))/5000
gt_p[k] <- length(which(dist_gt[[pos]][k,]>=train_overlap$TopGos[k]))/5000
}
train_overlap$BotGos <- cbind(train_overlap$BotGos,gb_p)
train_overlap$TopGos <- cbind(train_overlap$TopGos,gt_p)
pb_p <- NULL
pt_p <- NULL
for (k in 1:length(train_overlap$BotPAs)) {
pb_p[k] <- length(which(dist_pb[[pos]][k,]>=train_overlap$BotPAs[k]))/5000
pt_p[k] <- length(which(dist_pt[[pos]][k,]>=train_overlap$TopPAs[k]))/5000
}
train_overlap$BotPAs <- cbind(train_overlap$BotPAs,pb_p)
train_overlap$TopPAs <- cbind(train_overlap$TopPAs,pt_p)
results_train[[i]] <- train_overlap
bot_gos <- names(which(results_train[[i]]$BotGos[,1] >= 0.65 & results_train[[i]]$BotGos[,2] <= 0.01))
top_gos <- names(which(results_train[[i]]$TopGos[,1] >= 0.65 & results_train[[i]]$TopGos[,2] <= 0.01))
bot_pas <- names(which(results_train[[i]]$BotPAs[,1] >= 0.65 & results_train[[i]]$BotPAs[,2] <= 0.01))
top_pas <- names(which(results_train[[i]]$TopPAs[,1] >= 0.65 & results_train[[i]]$TopPAs[,2] <= 0.01))
print(bot_pas)
results[[i]] <- list(bot_gos,top_gos,bot_pas,top_pas)
}
results[[1]]
library(AnnotationDbi)
library(tidyverse)
#Load ECFP4 similarities of train set's pairs
similarities_path_ecfp4 <- c("C:/Users/user/Documents/deepSIBA/article_results/supplementary_figure_data/supplementary_figure_5/out_vcap_train.csv",
"C:/Users/user/Documents/deepSIBA/article_results/supplementary_figure_data/supplementary_figure_5/out_mcf7_train.csv",
"C:/Users/user/Documents/deepSIBA/article_results/supplementary_figure_data/supplementary_figure_5/out_a375_train.csv",
"C:/Users/user/Documents/deepSIBA/article_results/supplementary_figure_data/supplementary_figure_5/out_pc3_train.csv")
#Load training sets
train_path <- c("C:/Users/user/Documents/deepSIBA/learning/data/vcap/train_test_split/train.csv",
"C:/Users/user/Documents/deepSIBA/learning/data/mcf7/train_test_split/train.csv",
"C:/Users/user/Documents/deepSIBA/learning/data/a375/train_test_split/train.csv",
"C:/Users/user/Documents/deepSIBA/learning/data/pc3/train_test_split/train.csv")
#Load unique train smiles
uniq_train <- c("C:/Users/user/Documents/deepSIBA/article_results/supplementary_figure_data/supplementary_figure_5/vcap_uniq_train_smis.csv",
"C:/Users/user/Documents/deepSIBA/article_results/supplementary_figure_data/supplementary_figure_5/mcf7_uniq_train_smis.csv",
"C:/Users/user/Documents/deepSIBA/article_results/supplementary_figure_data/supplementary_figure_5/a375_uniq_train_smis.csv",
"C:/Users/user/Documents/deepSIBA/article_results/supplementary_figure_data/supplementary_figure_5/pc3_uniq_train_smis.csv")
cell <- c('vcap','mcf7','a375','pc3')
#Thesholds to define similars in ECFP4 level and Biological distance level
ecfp4_thresh <- 0.3
bio_thresh <- 0.2
