library(tidyverse)
library(cancerTiming)
library(viridis)
library(reshape2)
library(doFuture)
library(ggpubr)
drug_sigs_per_line_dups <- function(cell_line,sig_info,sig_metrics) {
# cell_line character of cell line
# sig_info dataframe of GSE info
# sig_metrics dataframe of GSE metrics
library(tidyverse)
options(warn =- 1)
cell <- sig_info %>%
filter(cell_id == cell_line) %>%
filter(pert_type == "trt_cp") %>%
group_by(pert_iname) %>%
mutate(count = n_distinct(sig_id)) %>%
ungroup()
print(paste0('the unique drugs for ',cell_line,' are ',length(unique(cell$pert_iname))))
## add the signature metrics
cell <- left_join(cell,sig_metrics)
## keep the drugs that we have only 1 signature for this cell line
cell_singles <- cell %>%
filter(count == 1) %>%
dplyr::select(-count)
print(paste0('the drugs that have only 1 signature for ',cell_line,' are ',length(unique(cell_singles$pert_iname))))
cell_singles$pert_itime <- factor(cell_singles$pert_itime)
print("time summary")
print(summary(cell_singles$pert_itime))
cell_singles$pert_idose <- factor(cell_singles$pert_idose)
print("dose summary")
print(summary(cell_singles$pert_idose))
## add quality column to single perturbations
cell_singles$quality <- 100
cell_singles <- cell_singles %>%
mutate(quality = if_else(is_exemplar == 1 & tas > 0.4 & distil_nsample>=2 ,true = 1,false = quality),
quality = if_else(is_exemplar == 1 & tas > 0.2 & tas<=0.4 & distil_nsample>2 ,true = 2,false = quality),
quality = if_else(is_exemplar == 1 & tas > 0.2 & tas<=0.4 & distil_nsample <=2 ,true = 3,false = quality),
quality = if_else(is_exemplar == 1 & tas > 0.1 & tas<=0.2 & distil_nsample>2 ,true = 4,false = quality),
quality = if_else(is_exemplar == 1 & tas > 0.1 & tas<=0.2 & distil_nsample <= 2 ,true = 5,false = quality),
quality = if_else(is_exemplar == 1 & tas < 0.1 & distil_nsample > 2 ,true = 6,false = quality),
quality = if_else(is_exemplar == 1 & tas < 0.1 & distil_nsample <= 2 ,true = 7,false = quality),
quality = if_else(is_exemplar == 0 ,true = 8,false = quality),
quality = factor(quality))
print("summary of the quality of drugs with only 1 signature")
print(summary(cell_singles$quality))
## keep the multiple signature drugs in cell
cell<- anti_join(cell,cell_singles)
### add priorities to the multiple signatures
cell$priority <- 100
cell <- cell %>%
mutate(priority = if_else(pert_dose == "10.0" & pert_time == 24,true = 1,false = priority),
priority = if_else(pert_idose == "5 ÂµM" & pert_time == 24,true = 2,false = priority),
priority = if_else(pert_idose != "5 ÂµM" & pert_dose != "10.0" & pert_time == 24,true = 3,false = priority),
priority = if_else(pert_dose == "10.0" & pert_time == 6,true = 4,false = priority),
priority = if_else(pert_idose == "5 ÂµM" & pert_time == 6,true = 5,false = priority),
priority = if_else(pert_idose != "5 ÂµM" & pert_dose != "10.0" & pert_time == 6,true = 6,false = priority),
priority = factor(priority))
print("priorities for drugs with multiple signatures")
print(summary(cell$priority))
### add quality to the multiple signatures
cell$quality <- 100
cell <- cell %>%
mutate(quality = if_else(is_exemplar == 1 & tas > 0.4 & distil_nsample>=2 ,true = 1,false = quality),
quality = if_else(is_exemplar == 1 & tas > 0.2 & tas<=0.4 & distil_nsample>2 ,true = 2,false = quality),
quality = if_else(is_exemplar == 1 & tas > 0.2 & tas<=0.4 & distil_nsample <=2 ,true = 3,false = quality),
quality = if_else(is_exemplar == 1 & tas > 0.1 & tas<=0.2 & distil_nsample>2 ,true = 4,false = quality),
quality = if_else(is_exemplar == 1 & tas > 0.1 & tas<=0.2 & distil_nsample <= 2 ,true = 5,false = quality),
quality = if_else(is_exemplar == 1 & tas < 0.1 & distil_nsample > 2 ,true = 6,false = quality),
quality = if_else(is_exemplar == 1 & tas < 0.1 & distil_nsample <= 2 ,true = 7,false = quality),
quality = if_else(is_exemplar == 0 ,true = 8,false = quality),
quality = factor(quality))
print("summary of the quality of drugs with multiple signatures")
print(summary(cell$quality))
print(paste0('the drugs that have Multiple signatures for ',cell_line,' are ',length(unique(cell$pert_iname))))
#### clean them based on quality for each drug and then solve the equalities with max tas
cell_cleaned <- cell %>%
group_by(pert_iname) %>%
filter(quality == min(as.numeric(quality))) %>%
ungroup %>%
dplyr::select(-c(count,priority))
cell_final <- bind_rows(cell_cleaned,cell_singles)
print("summary of final quality of signatures")
print(summary(cell_final$quality))
return(cell_cleaned)
}
kegg_path_analysis <- function(sig_ids, cmap_path_to_gctx, landmark_df) {
### this function calculates the NES and p.adj of the given signature ids
### 125 KEGG pathways are used
library(tidyverse)
library(fgsea)
library(gage)
library(EGSEAdata)
library(AnnotationDbi)
library(org.Hs.eg.db)
### first thing is to load the profiles from the GSE file
profiles <- get_cmap_signatures(cmap_path_to_gctx = cmap_path_to_gctx,sig_ids = sig_ids,landmark = T,landmark_df = landmark_df)
print("profiles loaded")
### load the gene sets
print("loading gene sets")
egsea.data(species = "human",returnInfo = TRUE)
rownames(profiles) <- landmark$`Entrez ID`
rownames(profiles) <- as.character(rownames(profiles))
print("running fgsea")
### run the analysis
pathway_list <- apply(profiles,MARGIN = 2,fgsea,pathways = kegg.pathways$human$kg.sets,
minSize=10,
maxSize=500,
nperm=1000)
print("fgsea finished")
### get the NES and p.adj
print("preparing output")
NES <- pathway_list[[1]]$NES
padj <- pathway_list[[1]]$padj
for (i in 2:length(pathway_list)) {
NES <- cbind(NES,pathway_list[[i]]$NES)
padj <- cbind(padj,pathway_list[[i]]$padj)
}
colnames(NES) <- names(pathway_list)
rownames(NES) <- pathway_list[[1]]$pathway
colnames(padj) <- names(pathway_list)
rownames(padj) <- pathway_list[[1]]$pathway
comb <- list(NES,padj)
return(comb)
}
get_cmap_signatures <- function(cmap_path_to_gctx, sig_ids, landmark = TRUE, landmark_df = NULL) {
library(tidyverse)
library(cmapR)
library(rhdf5)
library(AnnotationDbi)
library(org.Hs.eg.db)
ds_path <- cmap_path_to_gctx
if (landmark == TRUE) {
cmap_gctx <- parse.gctx(ds_path,rid = as.character(landmark_df$`Entrez ID`), cid = sig_ids)
cmap <- cmap_gctx@mat
cmap <- cmap[as.character(landmark_df$`Entrez ID`),]
rownames(cmap) <- landmark_df$Symbol
}
if (landmark == FALSE) {
cmap_gctx <- parse.gctx(ds_path, cid = sig_ids)
cmap <- cmap_gctx@mat
entrez <- rownames(cmap)
anno <- AnnotationDbi::select(org.Hs.eg.db,
keys = entrez,
columns = c("SYMBOL", "GENENAME","ENTREZID"),
keytype = "ENTREZID")
anno <- anno %>%
filter(!is.na(SYMBOL))
cmap <- cmap[anno$ENTREZID,]
rownames(cmap) <- anno$SYMBOL
}
return(cmap)
}
distance_scores <- function(num_table, threshold_count, names) {
library(GeneExpressionSignature)
library(tidyverse)
### rank the table
table_ranked <- apply(X = -num_table, MARGIN = 2, FUN = rank, ties.method = "random")
### create the phenodata
pheno2 <- as.data.frame(colnames(num_table))
rownames(pheno2) <- colnames(num_table)
pheno_new <- new("AnnotatedDataFrame",data=pheno2)
### create expression set
expr_set <- new("ExpressionSet",exprs = table_ranked, phenoData=pheno_new)
### calculate distances
distances <- ScoreGSEA(expr_set , threshold_count,"avg")
colnames(distances) <- names
rownames(distances) <- names
return(distances)
}
go_path_analysis <- function(sig_ids, cmap_path_to_gctx, landmark_df, goterms) {
### this function calculates the NES and p.adj of the given signature ids
### GOterms in a list form are used
library(tidyverse)
library(fgsea)
library(gage)
library(EGSEAdata)
library(AnnotationDbi)
library(org.Hs.eg.db)
### first thing is to load the profiles from the GSE file
profiles <- get_cmap_signatures(cmap_path_to_gctx = cmap_path_to_gctx,sig_ids = sig_ids,landmark = T,landmark_df = landmark_df)
print("profiles loaded")
### change to entrez ids
rownames(profiles) <- landmark$`Entrez ID`
rownames(profiles) <- as.character(rownames(profiles))
print("running fgsea")
go_list <- apply(profiles,MARGIN = 2,fgsea,pathways = goterms,
minSize=10,
maxSize=500,
nperm=1000)
print("fgsea finished")
### get the NES and p.adj
print("preparing output")
NES <- go_list[[1]]$NES
padj <- go_list[[1]]$padj
for (i in 2:length(go_list)) {
NES <- cbind(NES,go_list[[i]]$NES)
padj <- cbind(padj,go_list[[i]]$padj)
}
colnames(NES) <- names(go_list)
rownames(NES) <- go_list[[1]]$pathway
colnames(padj) <- names(go_list)
rownames(padj) <- go_list[[1]]$pathway
comb <- list(NES,padj)
return(comb)
}
sig <- read.delim("C:/Users/user/Documents/deepSIBA/preprocessing/data_preprocessing/cmap/GSE92742_Broad_LINCS_sig_info.txt")
sig <- read.delim("../../../preprocessing/data_preprocessing/cmap/GSE92742_Broad_LINCS_sig_info.txt")
# set path to cmap gctx file
ds_path <- "../../../../GSE92742_Broad_LINCS_Level5_COMPZ.MODZ_n473647x12328.gctx"
landmark <- read_tsv(file = "../../../preprocessing/data_preprocessing/cmap/cmap_landmark_genes.txt")
sig_metrics <- read.delim("../../../preprocessing/data_preprocessing/cmap/GSE92742_Broad_LINCS_sig_metrics.txt")
go <- readRDS("../../../preprocessing/data_preprocessing/utility/goterm_annotation.rds")
get_replicates_for_cell <- function(cell_line,quality) {
test <- drug_sigs_per_line_dups(cell_line = cell_line,sig_info = sig,sig_metrics = sig_metrics)
test <- test %>%
filter(pert_time == "24") %>%
filter(quality == quality) %>%
group_by(pert_iname) %>%
mutate(count = n_distinct(sig_id)) %>% ungroup() %>% filter(count > 1)
drugs <- unique(as.character(test$pert_iname))
drug <- drugs[1]
paths <- kegg_path_analysis(sig_ids = test$sig_id[which(test$pert_iname %in% drug)],cmap_path_to_gctx = ds_path,landmark_df = landmark)
profiles <- get_cmap_signatures(cmap_path_to_gctx = ds_path,sig_ids = test$sig_id[which(test$pert_iname %in% drug)],landmark = T,landmark_df = landmark)
nes <- paths[[1]]
pval <- paths[[2]]
thres <- c(3,4,5,6,7,8,9,10,11,12)
rep_mean <- matrix(0,nrow = length(drugs),ncol = 1)
rownames(rep_mean) <- drugs
for (i in 1:length(drugs)) {
drug <- drugs[i]
dist_rep <- list(0)
paths <- kegg_path_analysis(sig_ids = test$sig_id[which(test$pert_iname %in% drug)],cmap_path_to_gctx = ds_path,landmark_df = landmark)
nes2 <- paths[[1]]
for (j in 1:length(thres)) {
dist2 <- distance_scores(num_table = nes2,threshold_count = thres[j],names = colnames(nes2))
dist_rep[[j]] <- dist2
}
sam <- 0
for (k in 1:length(dist_rep)) {
sam <- sam + dist_rep[[k]]
}
sam <- sam/length(dist_rep)
rep_mean[i,1] <- mean(sam[upper.tri(x = sam,diag = F)])
#rep_mean[i,1] <- sam
}
return(list(test,rep_mean))
}
thres <- c(10,20,30,40,50)
reps_info <- drug_sigs_per_line_dups(cell_line = "MCF7",sig_info = sig,sig_metrics = sig_metrics)
reps_info$quality <- as.character(reps_info$quality)
reps_info <- reps_info %>% filter(quality == "1") %>%
group_by(pert_iname) %>%
mutate(count = n_distinct(sig_id),
count_dose = n_distinct(pert_dose),
count_time = n_distinct(pert_time)) %>%
ungroup() %>% filter(count > 1) %>% filter(count_dose == 1) %>% filter(count_time == 1)
drugs <- unique(as.character(reps_info$pert_iname))
rep_mean_q1 <- matrix(0,nrow = length(drugs),ncol = 1)
rownames(rep_mean_q1) <- drugs
#gene distance calculation for quality 1 replicates
for (i in 1:length(drugs)) {
drug <- drugs[i]
dist_rep <- list(0)
genes <- get_cmap_signatures(sig_ids = reps_info$sig_id[which(reps_info$pert_iname %in% drug)],cmap_path_to_gctx = ds_path,landmark_df = landmark,landmark = TRUE)
for (j in 1:length(thres)) {
dist2 <- distance_scores(num_table = genes,threshold_count = thres[j],names = colnames(genes))
dist_rep[[j]] <- dist2
}
sam <- 0
for (k in 1:length(dist_rep)) {
sam <- sam + dist_rep[[k]]
}
sam <- sam/length(dist_rep)
rep_mean_q1[i,1] <- mean(sam[upper.tri(x = sam,diag = F)])
#rep_mean[i,1] <- sam
}
q1_mcf7_distances <- rep_mean_q1
reps_info <- drug_sigs_per_line_dups(cell_line = "MCF7",sig_info = sig,sig_metrics = sig_metrics)
reps_info$quality <- as.character(reps_info$quality)
reps_info <- reps_info %>% filter(quality == "2") %>%
group_by(pert_iname) %>%
mutate(count = n_distinct(sig_id),
count_dose = n_distinct(pert_dose),
count_time = n_distinct(pert_time)) %>%
ungroup() %>% filter(count > 1) %>% filter(count_dose == 1) %>% filter(count_time == 1)
drugs <- unique(as.character(reps_info$pert_iname))
rep_mean_q1 <- matrix(0,nrow = length(drugs),ncol = 1)
rownames(rep_mean_q1) <- drugs
#gene distance calculation for quality 1 replicates
for (i in 1:length(drugs)) {
drug <- drugs[i]
dist_rep <- list(0)
genes <- get_cmap_signatures(sig_ids = reps_info$sig_id[which(reps_info$pert_iname %in% drug)],cmap_path_to_gctx = ds_path,landmark_df = landmark,landmark = TRUE)
for (j in 1:length(thres)) {
dist2 <- distance_scores(num_table = genes,threshold_count = thres[j],names = colnames(genes))
dist_rep[[j]] <- dist2
}
sam <- 0
for (k in 1:length(dist_rep)) {
sam <- sam + dist_rep[[k]]
}
sam <- sam/length(dist_rep)
rep_mean_q1[i,1] <- mean(sam[upper.tri(x = sam,diag = F)])
#rep_mean[i,1] <- sam
}
multi2 <- function (x, col = palette(), lwd = 1, lty = 1, xlim, ylim,ylab = "Density",
...)
{
if (missing(xlim)) {
xvals <- unlist(lapply(x, function(z) {
range(z[is.finite(z)], na.rm = TRUE)
}))
xlim <- range(xvals[is.finite(xvals)])
}
dens <- lapply(x, function(x) {
density(x[is.finite(x)])
})
yvals <- unlist(lapply(dens, function(x) {
x$y
}))
plot(0, type = "n", xlim = xlim, ylim = ylim, ylab = ylab,
...)
out <- mapply(dens, rep(col, length = length(dens)), rep(lwd,
length = length(dens)), rep(lty, length = length(dens)),
FUN = function(x, col, lwd, lty) {
lines(x, col = col, lwd = lwd, lty = lty)
})
}
q2_mcf7_distances <- rep_mean_q1
multi2(list(q1_mcf7_distances[,1]/2,q2_mcf7_distances[,1]/2),xlab = "Gene-level distance", xlim = c(0,0.7),xaxs="i",yaxs="i", ylim = c(0,6))
title("A", adj = 0)
legend("topright",
legend = c("Q1 duplicate pairs (n = 20)", "Q2 duplicate pairs (n = 19)"),
col = c('black',
'red'),
lty = c(1,1),
bty = "o",
pt.cex = 1.5,
cex = 0.8,
text.col = "black",
horiz = F ,
inset = c(0.01, 0.01))
q1_mcf7_distances <- as.data.frame(q1_mcf7_distances)
q1_mcf7_distances$quality <- "Quality 1"
q2_mcf7_distances <- as.data.frame(q2_mcf7_distances)
q2_mcf7_distances$quality <- "Quality 2"
df_dot <- bind_rows(q1_mcf7_distances,q2_mcf7_distances)
df_dot$quality <- as.factor(df_dot$quality)
dotplot <- ggplot(df_dot, aes(x=quality, y=V1, fill = quality)) +
geom_violin()+geom_boxplot(width=0.1)+
scale_fill_discrete(name="Duplicate quality",
labels=c("Quality 1","Quality 2"))+
ylim(0,max(df_dot$V1))+
xlab("")+ylab("Gene-level distance")+
theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),text = element_text(size = 15),legend.position = "none")
dotplot
library(doFuture)
registerDoFuture()
plan(multiprocess,workers = 6)
data <- readRDS("../../../preprocessing/data_preprocessing/processed_data/initial_signatures_with_mycranks.rds")
gos <- go
thresholds <- c(10,20,30,40,50)
thresholds2 <- c(5,10,15,20,25)
vcap_q2 <- data %>%
filter(cell_id == "VCAP") %>%
#filter(pert_time == "24") %>%
filter(quality == "2")
mcf7_q2 <- data %>%
filter(cell_id == "MCF7") %>%
#filter(pert_time == "24") %>%
filter(quality == "2")
vcap_q2 <- vcap_q2[which(vcap_q2$pert_id %in% mcf7_q2$pert_id),]
mcf7_q2 <- mcf7_q2[which(mcf7_q2$pert_id %in% vcap_q2$pert_id),]
# gene distance calculations for vcap
# This section is optional, the data can be loaded premade from article_data
genes_vcap <- get_cmap_signatures(cmap_path_to_gctx = ds_path,sig_ids = as.character(vcap_q2$sig_id),landmark = TRUE,landmark_df = landmark)
genes_mcf7 <- get_cmap_signatures(cmap_path_to_gctx = ds_path,sig_ids = mcf7_q2$sig_id,landmark = TRUE,landmark_df = landmark)
thresholds <- c(10,20,30,40,50)
dist_all_vcap_q2 <- NULL
### calculate distances
dist_all_vcap_q2_g <- foreach(thres = thresholds) %dopar% {
distance_scores(num_table = genes_vcap,threshold_count = thres,names = colnames(genes_vcap))
}
ld <- length(dist_all_vcap_q2_g)
dimd <- dim(dist_all_vcap_q2_g[[1]])
distance_vcap_q2_g <- do.call(cbind,dist_all_vcap_q2_g)
distance_vcap_q2_g <- array(distance_vcap_q2_g,c(dim=dimd,ld))
mean_dist_vcap_q2_g <- apply(distance_vcap_q2_g, c(1,2), mean, na.rm = TRUE)
colnames(mean_dist_vcap_q2_g) <- vcap_q2$pert_iname
rownames(mean_dist_vcap_q2_g) <- vcap_q2$pert_iname
mean_dist_vcap_q2_g[upper.tri(x = mean_dist_vcap_q2_g,diag = T)] <- 666
gene_vcap2 <- reshape2::melt(mean_dist_vcap_q2_g)
gene_vcap2 <- gene_vcap2 %>% filter(value != 666)
colnames(gene_vcap2) <- c("pert1","pert2","gene_vcap")
dist_all_mcf7_q2 <- NULL
### calculate distances
dist_all_mcf7_q2_g <- foreach(thres = thresholds2) %dopar% {
distance_scores(num_table = genes_mcf7,threshold_count = thres,names = colnames(genes_mcf7))
}
ld <- length(dist_all_mcf7_q2_g)
dimd <- dim(dist_all_mcf7_q2_g[[1]])
distance_mcf7_q2_g <- do.call(cbind,dist_all_mcf7_q2_g)
distance_mcf7_q2_g <- array(distance_mcf7_q2_g,c(dim=dimd,ld))
mean_dist_mcf7_q2_g <- apply(distance_mcf7_q2_g, c(1,2), mean, na.rm = TRUE)
colnames(mean_dist_mcf7_q2_g) <- mcf7_q2$pert_iname
rownames(mean_dist_mcf7_q2_g) <- mcf7_q2$pert_iname
mean_dist_mcf7_q2_g[upper.tri(x = mean_dist_mcf7_q2_g,diag = T)] <- 666
gene_mcf72 <- reshape2::melt(mean_dist_mcf7_q2_g)
gene_mcf72 <- gene_mcf72 %>% filter(value != 666)
colnames(gene_mcf72) <- c("pert1","pert2","gene_mcf7")
allq2<-left_join(gene_vcap2,gene_mcf72,by = c("pert1"="pert1","pert2"="pert2"))
allq2 <- allq2 %>% filter(!is.na(gene_mcf7)) %>% mutate(gene_vcap = gene_vcap/2,
gene_mcf7 = gene_mcf7/2)
allq1 <- readRDS("q1_res_fig1.rds")
allq1 <- readRDS("../../figure_extra_data/figure_3/q1_res_fig1.rds")
allq2 <- readRDS("../../figure_extra_data/figure_3/q2_res_fig1.rds")
plot(allq2$gene_vcap,allq2$gene_mcf7,pch=20,xlim = c(0,0.8),cex = 0.5,ylim = c(0,0.8),xlab="VCAP Gene-level distance",ylab="MCF7 Gene-level distance",xaxs="i",yaxs="i")
title("C", adj = 0)
abline(v=0.4,col="red",lwd = 2)
abline(h=0.39,col="red" ,lwd = 2)
legend("topleft",
legend = "Pearson's r = 0.075",
col = "black",
pch = '',
bty = "o",
pt.cex = 2,
cex = 1,
text.col = "black",
horiz = T )
cor(allq2$gene_vcap,allq2$gene_mcf7)
q1plot <- ggplot(allq2,aes(x=gene_vcap,y = gene_mcf7)) +
geom_point(size = 0.1) + xlab("VCAP gene-level distance") + ylab("MCF7 gene-level distance") +
geom_vline(aes(xintercept=0.19),linetype="dotdash",col = "red",lwd = 0.75)+
geom_hline(aes(yintercept=0.2),linetype="dotdash",col = "red",lwd = 0.75)+
annotate(geom = 'text', label = "Pearson's r = 0.068", x = 0.02, y = 0.8, hjust = 0, vjust = 1,size = 8)+
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),text = element_text(size = 15),legend.position = "none")
q1plot
q1plot <- ggplot(allq2,aes(x=gene_vcap,y = gene_mcf7)) +
geom_point(size = 0.1) + xlab("VCAP gene-level distance") + ylab("MCF7 gene-level distance") +
geom_vline(aes(xintercept=0.40),linetype="dotdash",col = "red",lwd = 0.75)+
geom_hline(aes(yintercept=0.39),linetype="dotdash",col = "red",lwd = 0.75)+
annotate(geom = 'text', label = "Pearson's r = 0.068", x = 0.02, y = 0.8, hjust = 0, vjust = 1,size = 8)+
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),text = element_text(size = 15),legend.position = "none")
q1plot
png(file="figure_3_q2.png",width=14,height=12,units = "cm",res=600)
q1plot
dev.off()
