# ecfp sims is the square matrix of ecfp similarities from all_smiles
library(tidyverse)
ecfp_sims <- ecfp_sims[,-1]
ecfp_sims <- as.matrix(ecfp_sims)
diag(ecfp_sims) <- 0
colmax <- apply(ecfp_sims,2,max)
indcandidates <- which(colmax < max_sim & colmax >= min_sim)
allq1smiles <- as.character(allq1smiles$x)
names(colmax) <- allq1smiles
#hist(colmax[indcandidates])
candidates <- as.character(allq1smiles[indcandidates])
breaks <- c(0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9)
cold_val <- function(histogram,breaks,all_data,drug_vector,ncold,mtry){
library(tidyverse)
library(MLmetrics)
best_mse <- 1
for (i in 1:mtry) {
drugs_sampled <- sample(drug_vector,ncold,replace = F)
indices_all <- unique(union(which(all_data$rdkit.x %in% drugs_sampled),which(all_data$rdkit.y %in% drugs_sampled)))
hist_new <- hist(all_data[indices_all,]$value,breaks = breaks,freq = T,plot = F)
mse <- MSE(hist_new$density,histogram$density)
if (mse < best_mse) {
best_mse <- mse
best_sample <- drugs_sampled
print(best_mse)
print(i)
}
}
return(best_sample)
}
a <- hist(dataframe$value,breaks = breaks)
for (i in 1:no_folds) {
alldata <- dataframe
cold <- cold_val(histogram = a,breaks = breaks,all_data = alldata,drug_vector = as.character(candidates),ncold = n_drugs,mtry = 20000)
alldata$iscoldx <- alldata$rdkit.x %in% cold
alldata$iscoldy <- alldata$rdkit.y %in% cold
val_data <- alldata %>% filter(iscoldx == T | iscoldy == T)
train_data <- anti_join(alldata,val_data)
dir.create(paste0(dir,"/fold_",i))
png(filename = paste0(dir,"/fold_",i,"/cold_hist_",i,".png"))
hist_cold <- hist(val_data$value,breaks = breaks,freq = T)
dev.off()
trainsmiles <- unique(c(train_data$rdkit.x,train_data$rdkit.y))
write.csv(cold,paste0(dir,"/fold_",i,"/valsmiles_",i,".csv"))
write.csv(trainsmiles,paste0(dir,"/fold_",i,"/trainsmiles_",i,".csv"))
indkeep <- unique(c(which(val_data$rdkit.x %in% cold),which(val_data$rdkit.y %in% cold)))
val_data <- val_data[indkeep,]
val_data_cold <- val_data %>% filter((iscoldx == T & iscoldy == T))
val_data <- val_data %>% filter(!(iscoldx == T & iscoldy == T))
write.csv(train_data,paste0(dir,"/fold_",i,"/train_",i,".csv"))
write.csv(val_data,paste0(dir,"/fold_",i,"/val_",i,".csv"))
write.csv(val_data_cold,paste0(dir,"/fold_",i,"/val_cold_",i,".csv"))
# make new candidates
print(length(which(cold %in% trainsmiles)))
candidates <- candidates[-which(candidates %in% cold)]
png(filename = paste0(dir,"/fold_",i,"/val_sims_",i,".png"))
hist_sims <- hist(colmax[cold],breaks = seq(0,1,0.1),freq = T)
dev.off()
}
}
sig_info <- read.delim("data_preprocessing/cmap/GSE92742_Broad_LINCS_sig_info.txt")
sig_metrics <- read.delim("data_preprocessing/cmap/GSE92742_Broad_LINCS_sig_metrics.txt")
# the full path to the cmap gctx file
ds_path <- "/home/biolab/Documents/GSE92742_Broad_LINCS_Level5_COMPZ.MODZ_n473647x12328.gctx"
landmark <- read_tsv(file = "data_preprocessing/cmap/cmap_landmark_genes.txt")
go_anno <- readRDS("data_preprocessing/utility/goterm_annotation.rds")
pert <- readRDS("data_preprocessing/utility/pert_id_to_rdkit.rds")
# get the signatures for a375
a375 <- drug_sigs_per_line(cell_line = "HA1E",sig_info = sig_info,
sig_metrics = sig_metrics)
a375 <- a375 %>% filter(quality==1)
a375 <- a375[which(as.character(a375$pert_id) %in% pert$pert_id),]
# get the signatures for a375
a375 <- drug_sigs_per_line(cell_line = "HT29",sig_info = sig_info,
sig_metrics = sig_metrics)
a375 <- a375 %>% filter(quality==1)
a375 <- a375[which(as.character(a375$pert_id) %in% pert$pert_id),]
# get the signatures for a375
a375 <- drug_sigs_per_line(cell_line = "A549",sig_info = sig_info,
sig_metrics = sig_metrics)
a375 <- a375 %>% filter(quality==1)
a375 <- a375[which(as.character(a375$pert_id) %in% pert$pert_id),]
train <- read_csv('../learning/data/ht29/5_fold_cv_split/fold_1/train_1.csv')
View(train)
train <- read.csv('../learning/data/ht29/5_fold_cv_split/fold_1/train_1.csv')
View(train)
get_cmap_signatures <- function(cmap_path_to_gctx, sig_ids, landmark = TRUE, landmark_df = NULL) {
library(tidyverse)
library(cmapR)
library(rhdf5)
library(AnnotationDbi)
library(org.Hs.eg.db)
ds_path <- cmap_path_to_gctx
if (landmark == TRUE) {
cmap_gctx <- parse.gctx(ds_path,rid = as.character(landmark_df$`Entrez ID`), cid = sig_ids)
cmap <- cmap_gctx@mat
cmap <- cmap[as.character(landmark_df$`Entrez ID`),]
rownames(cmap) <- landmark_df$Symbol
}
if (landmark == FALSE) {
cmap_gctx <- parse.gctx(ds_path, cid = sig_ids)
cmap <- cmap_gctx@mat
entrez <- rownames(cmap)
anno <- AnnotationDbi::select(org.Hs.eg.db,
keys = entrez,
columns = c("SYMBOL", "GENENAME","ENTREZID"),
keytype = "ENTREZID")
anno <- anno %>%
filter(!is.na(SYMBOL))
cmap <- cmap[anno$ENTREZID,]
rownames(cmap) <- anno$SYMBOL
}
return(cmap)
}
go_path_analysis <- function(sig_ids, cmap_path_to_gctx, landmark_df, goterms) {
### this function calculates the NES and p.adj of the given signature ids
### GOterms in a list form are used
library(tidyverse)
library(fgsea)
library(gage)
library(EGSEAdata)
library(AnnotationDbi)
library(org.Hs.eg.db)
### first thing is to load the profiles from the GSE file
profiles <- get_cmap_signatures(cmap_path_to_gctx = cmap_path_to_gctx,sig_ids = sig_ids,landmark = T,landmark_df = landmark_df)
print("profiles loaded")
### change to entrez ids
rownames(profiles) <- landmark_df$`Entrez ID`
rownames(profiles) <- as.character(rownames(profiles))
print("running fgsea")
go_list <- apply(profiles,MARGIN = 2,fgsea,pathways = goterms,
minSize=10,
maxSize=500,
nperm=1000)
print("fgsea finished")
### get the NES and p.adj
print("preparing output")
NES <- go_list[[1]]$NES
padj <- go_list[[1]]$padj
for (i in 2:length(go_list)) {
NES <- cbind(NES,go_list[[i]]$NES)
padj <- cbind(padj,go_list[[i]]$padj)
}
colnames(NES) <- names(go_list)
rownames(NES) <- go_list[[1]]$pathway
colnames(padj) <- names(go_list)
rownames(padj) <- go_list[[1]]$pathway
comb <- list(NES,padj)
return(comb)
}
drug_sigs_per_line <- function(cell_line,sig_info,sig_metrics) {
# cell_line character of cell line
# sig_info dataframe of GSE info
# sig_metrics dataframe of GSE metrics
library(tidyverse)
options(warn =- 1)
cell <- sig_info %>%
filter(cell_id == cell_line) %>%
filter(pert_type == "trt_cp") %>%
group_by(pert_iname) %>%
mutate(count = n_distinct(sig_id)) %>%
ungroup()
print(paste0('the unique drugs for ',cell_line,' are ',length(unique(cell$pert_iname))))
## add the signature metrics
cell <- left_join(cell,sig_metrics)
## keep the drugs that we have only 1 signature for this cell line
cell_singles <- cell %>%
filter(count == 1) %>%
dplyr::select(-count)
print(paste0('the drugs that have only 1 signature for ',cell_line,' are ',length(unique(cell_singles$pert_iname))))
cell_singles$pert_itime <- factor(cell_singles$pert_itime)
print("time summary")
print(summary(cell_singles$pert_itime))
cell_singles$pert_idose <- factor(cell_singles$pert_idose)
print("dose summary")
print(summary(cell_singles$pert_idose))
## add quality column to single perturbations
cell_singles$quality <- 100
cell_singles <- cell_singles %>%
mutate(quality = if_else(is_exemplar == 1 & tas > 0.4 & distil_nsample>=2 ,true = 1,false = quality),
quality = if_else(is_exemplar == 1 & tas > 0.2 & tas<=0.4 & distil_nsample>2 ,true = 2,false = quality),
quality = if_else(is_exemplar == 1 & tas > 0.2 & tas<=0.4 & distil_nsample <=2 ,true = 3,false = quality),
quality = if_else(is_exemplar == 1 & tas > 0.1 & tas<=0.2 & distil_nsample>2 ,true = 4,false = quality),
quality = if_else(is_exemplar == 1 & tas > 0.1 & tas<=0.2 & distil_nsample <= 2 ,true = 5,false = quality),
quality = if_else(is_exemplar == 1 & tas < 0.1 & distil_nsample > 2 ,true = 6,false = quality),
quality = if_else(is_exemplar == 1 & tas < 0.1 & distil_nsample <= 2 ,true = 7,false = quality),
quality = if_else(is_exemplar == 0 ,true = 8,false = quality),
quality = factor(quality))
print("summary of the quality of drugs with only 1 signature")
print(summary(cell_singles$quality))
## keep the multiple signature drugs in cell
cell<- anti_join(cell,cell_singles)
### add priorities to the multiple signatures
cell$priority <- 100
cell <- cell %>%
mutate(priority = if_else(pert_dose == "10.0" & pert_time == 24,true = 1,false = priority),
priority = if_else(pert_idose == "5 ÂµM" & pert_time == 24,true = 2,false = priority),
priority = if_else(pert_idose != "5 ÂµM" & pert_dose != "10.0" & pert_time == 24,true = 3,false = priority),
priority = if_else(pert_dose == "10.0" & pert_time == 6,true = 4,false = priority),
priority = if_else(pert_idose == "5 ÂµM" & pert_time == 6,true = 5,false = priority),
priority = if_else(pert_idose != "5 ÂµM" & pert_dose != "10.0" & pert_time == 6,true = 6,false = priority),
priority = factor(priority))
print("priorities for drugs with multiple signatures")
print(summary(cell$priority))
### add quality to the multiple signatures
cell$quality <- 100
cell <- cell %>%
mutate(quality = if_else(is_exemplar == 1 & tas > 0.4 & distil_nsample>=2 ,true = 1,false = quality),
quality = if_else(is_exemplar == 1 & tas > 0.2 & tas<=0.4 & distil_nsample>2 ,true = 2,false = quality),
quality = if_else(is_exemplar == 1 & tas > 0.2 & tas<=0.4 & distil_nsample <=2 ,true = 3,false = quality),
quality = if_else(is_exemplar == 1 & tas > 0.1 & tas<=0.2 & distil_nsample>2 ,true = 4,false = quality),
quality = if_else(is_exemplar == 1 & tas > 0.1 & tas<=0.2 & distil_nsample <= 2 ,true = 5,false = quality),
quality = if_else(is_exemplar == 1 & tas < 0.1 & distil_nsample > 2 ,true = 6,false = quality),
quality = if_else(is_exemplar == 1 & tas < 0.1 & distil_nsample <= 2 ,true = 7,false = quality),
quality = if_else(is_exemplar == 0 ,true = 8,false = quality),
quality = factor(quality))
print("summary of the quality of drugs with multiple signatures")
print(summary(cell$quality))
print(paste0('the drugs that have Multiple signatures for ',cell_line,' are ',length(unique(cell$pert_iname))))
#### clean them based on quality for each drug and then solve the equalities with max tas
cell_cleaned <- cell %>%
group_by(pert_iname) %>%
filter(quality == min(as.numeric(quality))) %>%
filter(tas == max(tas)) %>%
ungroup %>%
dplyr::select(-c(count,priority))
cell_final <- bind_rows(cell_cleaned,cell_singles)
print("summary of final quality of signatures")
print(summary(cell_final$quality))
return(cell_final)
}
distance_scores <- function(num_table, threshold_count, names) {
library(GeneExpressionSignature)
library(tidyverse)
### rank the table
table_ranked <- apply(X = -num_table, MARGIN = 2, FUN = rank, ties.method = "random")
### create the phenodata
pheno2 <- as.data.frame(colnames(num_table))
rownames(pheno2) <- colnames(num_table)
pheno_new <- new("AnnotatedDataFrame",data=pheno2)
### create expression set
expr_set <- new("ExpressionSet",exprs = table_ranked, phenoData=pheno_new)
### calculate distances
distances <- ScoreGSEA(expr_set , threshold_count,"avg")
colnames(distances) <- names
rownames(distances) <- names
return(distances)
}
cross_validation <- function(dataframe,allq1smiles,ecfp_sims,no_folds,n_drugs,max_sim,min_sim,dir){
# dataframe has all training data with 0-2 distances
# allsmiles should be character vector of all rdkit smiles
# ecfp sims is the square matrix of ecfp similarities from all_smiles
library(tidyverse)
ecfp_sims <- ecfp_sims[,-1]
ecfp_sims <- as.matrix(ecfp_sims)
diag(ecfp_sims) <- 0
colmax <- apply(ecfp_sims,2,max)
indcandidates <- which(colmax < max_sim & colmax >= min_sim)
allq1smiles <- as.character(allq1smiles$x)
names(colmax) <- allq1smiles
#hist(colmax[indcandidates])
candidates <- as.character(allq1smiles[indcandidates])
breaks <- c(0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9)
cold_val <- function(histogram,breaks,all_data,drug_vector,ncold,mtry){
library(tidyverse)
library(MLmetrics)
best_mse <- 1
for (i in 1:mtry) {
drugs_sampled <- sample(drug_vector,ncold,replace = F)
indices_all <- unique(union(which(all_data$rdkit.x %in% drugs_sampled),which(all_data$rdkit.y %in% drugs_sampled)))
hist_new <- hist(all_data[indices_all,]$value,breaks = breaks,freq = T,plot = F)
mse <- MSE(hist_new$density,histogram$density)
if (mse < best_mse) {
best_mse <- mse
best_sample <- drugs_sampled
print(best_mse)
print(i)
}
}
return(best_sample)
}
a <- hist(dataframe$value,breaks = breaks)
for (i in 1:no_folds) {
alldata <- dataframe
cold <- cold_val(histogram = a,breaks = breaks,all_data = alldata,drug_vector = as.character(candidates),ncold = n_drugs,mtry = 20000)
alldata$iscoldx <- alldata$rdkit.x %in% cold
alldata$iscoldy <- alldata$rdkit.y %in% cold
val_data <- alldata %>% filter(iscoldx == T | iscoldy == T)
train_data <- anti_join(alldata,val_data)
dir.create(paste0(dir,"/fold_",i))
png(filename = paste0(dir,"/fold_",i,"/cold_hist_",i,".png"))
hist_cold <- hist(val_data$value,breaks = breaks,freq = T)
dev.off()
trainsmiles <- unique(c(train_data$rdkit.x,train_data$rdkit.y))
write.csv(cold,paste0(dir,"/fold_",i,"/valsmiles_",i,".csv"))
write.csv(trainsmiles,paste0(dir,"/fold_",i,"/trainsmiles_",i,".csv"))
indkeep <- unique(c(which(val_data$rdkit.x %in% cold),which(val_data$rdkit.y %in% cold)))
val_data <- val_data[indkeep,]
val_data_cold <- val_data %>% filter((iscoldx == T & iscoldy == T))
val_data <- val_data %>% filter(!(iscoldx == T & iscoldy == T))
write.csv(train_data,paste0(dir,"/fold_",i,"/train_",i,".csv"))
write.csv(val_data,paste0(dir,"/fold_",i,"/val_",i,".csv"))
write.csv(val_data_cold,paste0(dir,"/fold_",i,"/val_cold_",i,".csv"))
# make new candidates
print(length(which(cold %in% trainsmiles)))
candidates <- candidates[-which(candidates %in% cold)]
png(filename = paste0(dir,"/fold_",i,"/val_sims_",i,".png"))
hist_sims <- hist(colmax[cold],breaks = seq(0,1,0.1),freq = T)
dev.off()
}
}
sig_info <- read.delim("data_preprocessing/cmap/GSE92742_Broad_LINCS_sig_info.txt")
sig_metrics <- read.delim("data_preprocessing/cmap/GSE92742_Broad_LINCS_sig_metrics.txt")
# the full path to the cmap gctx file
ds_path <- "/home/biolab/Documents/GSE92742_Broad_LINCS_Level5_COMPZ.MODZ_n473647x12328.gctx"
landmark <- read_tsv(file = "data_preprocessing/cmap/cmap_landmark_genes.txt")
go_anno <- readRDS("data_preprocessing/utility/goterm_annotation.rds")
pert <- readRDS("data_preprocessing/utility/pert_id_to_rdkit.rds")
# get the signatures for a375
a375 <- drug_sigs_per_line(cell_line = "HT29",sig_info = sig_info,
sig_metrics = sig_metrics)
a375 <- a375 %>% filter(quality==1)
a375 <- a375[which(as.character(a375$pert_id) %in% pert$pert_id),]
go_nes <- go_path_analysis(sig_ids = a375$sig_id,cmap_path_to_gctx = ds_path,landmark_df = landmark,goterms = go_anno)
a375_go <- go_nes[[1]]
# run distances
thresholds <- c(10,20,30,40,50)
dist_a375 <- NULL
### calculate distances
dist_a375 <- foreach(thres = thresholds) %dopar% {
distance_scores(num_table = a375_go ,threshold_count = thres,names = colnames(a375_go))
}
# average distance for different thresholds
distance <- do.call(cbind,dist_a375)
distance <- array(distance,c(dim=dim(dist_a375[[1]]),length(dist_a375)))
mean_dist_a375 <- apply(distance, c(1,2), mean, na.rm = TRUE)
mean_dist_a375[lower.tri(mean_dist_a375,diag = T)] <- 666
colnames(mean_dist_a375) <- as.character(a375$pert_id)
rownames(mean_dist_a375) <- as.character(a375$pert_id)
# long format dataframe
a375_dist <- reshape2::melt(mean_dist_a375)
a375_dist <- a375_dist %>% filter(value != 666)
# add rdkit smiles to a375
a375 <- left_join(a375,pert)
a375 <- a375 %>% dplyr::select(sig_id,pert_id,pert_iname,quality,rdkit,pert_dose,pert_time)
# add info from the a375 dataframe
a375_dist <- left_join(a375_dist,a375, by = c("Var1"="pert_id"))
a375_dist <- left_join(a375_dist,a375, by = c("Var2"="pert_id"))
write.csv('../learning/data/ht29/alldata_ht29.csv')
write.csv(a375_dist,'../learning/data/ht29/alldata_ht29.csv')
hist(a375_dist)
hist(a375_dist$value)
# get the signatures for a375
a375 <- drug_sigs_per_line(cell_line = "A549",sig_info = sig_info,
sig_metrics = sig_metrics)
a375 <- a375 %>% filter(quality==1)
a375 <- a375[which(as.character(a375$pert_id) %in% pert$pert_id),]
go_nes <- go_path_analysis(sig_ids = a375$sig_id,cmap_path_to_gctx = ds_path,landmark_df = landmark,goterms = go_anno)
a375_go <- go_nes[[1]]
# run distances
thresholds <- c(10,20,30,40,50)
dist_a375 <- NULL
### calculate distances
dist_a375 <- foreach(thres = thresholds) %dopar% {
distance_scores(num_table = a375_go ,threshold_count = thres,names = colnames(a375_go))
}
# average distance for different thresholds
distance <- do.call(cbind,dist_a375)
distance <- array(distance,c(dim=dim(dist_a375[[1]]),length(dist_a375)))
mean_dist_a375 <- apply(distance, c(1,2), mean, na.rm = TRUE)
mean_dist_a375[lower.tri(mean_dist_a375,diag = T)] <- 666
colnames(mean_dist_a375) <- as.character(a375$pert_id)
rownames(mean_dist_a375) <- as.character(a375$pert_id)
# long format dataframe
a375_dist <- reshape2::melt(mean_dist_a375)
a375_dist <- a375_dist %>% filter(value != 666)
# add rdkit smiles to a375
a375 <- left_join(a375,pert)
a375 <- a375 %>% dplyr::select(sig_id,pert_id,pert_iname,quality,rdkit,pert_dose,pert_time)
# add info from the a375 dataframe
a375_dist <- left_join(a375_dist,a375, by = c("Var1"="pert_id"))
a375_dist <- left_join(a375_dist,a375, by = c("Var2"="pert_id"))
write.csv(a375_dist,'../learning/data/a549/alldata_a549.csv')
# get the signatures for a375
a375 <- drug_sigs_per_line(cell_line = "HA1E",sig_info = sig_info,
sig_metrics = sig_metrics)
a375 <- a375 %>% filter(quality==1)
a375 <- a375[which(as.character(a375$pert_id) %in% pert$pert_id),]
go_nes <- go_path_analysis(sig_ids = a375$sig_id,cmap_path_to_gctx = ds_path,landmark_df = landmark,goterms = go_anno)
a375_go <- go_nes[[1]]
# run distances
thresholds <- c(10,20,30,40,50)
dist_a375 <- NULL
### calculate distances
dist_a375 <- foreach(thres = thresholds) %dopar% {
distance_scores(num_table = a375_go ,threshold_count = thres,names = colnames(a375_go))
}
# average distance for different thresholds
distance <- do.call(cbind,dist_a375)
distance <- array(distance,c(dim=dim(dist_a375[[1]]),length(dist_a375)))
mean_dist_a375 <- apply(distance, c(1,2), mean, na.rm = TRUE)
mean_dist_a375[lower.tri(mean_dist_a375,diag = T)] <- 666
colnames(mean_dist_a375) <- as.character(a375$pert_id)
rownames(mean_dist_a375) <- as.character(a375$pert_id)
# long format dataframe
a375_dist <- reshape2::melt(mean_dist_a375)
a375_dist <- a375_dist %>% filter(value != 666)
# add rdkit smiles to a375
a375 <- left_join(a375,pert)
a375 <- a375 %>% dplyr::select(sig_id,pert_id,pert_iname,quality,rdkit,pert_dose,pert_time)
# add info from the a375 dataframe
a375_dist <- left_join(a375_dist,a375, by = c("Var1"="pert_id"))
a375_dist <- left_join(a375_dist,a375, by = c("Var2"="pert_id"))
write.csv(a375_dist,'../learning/data/ha1e/alldata_ha1e.csv')
# get the signatures for a375
a375 <- drug_sigs_per_line(cell_line = "HEPG2",sig_info = sig_info,
sig_metrics = sig_metrics)
a375 <- a375 %>% filter(quality==1)
a375 <- a375[which(as.character(a375$pert_id) %in% pert$pert_id),]
go_nes <- go_path_analysis(sig_ids = a375$sig_id,cmap_path_to_gctx = ds_path,landmark_df = landmark,goterms = go_anno)
a375_go <- go_nes[[1]]
# run distances
thresholds <- c(10,20,30,40,50)
dist_a375 <- NULL
### calculate distances
dist_a375 <- foreach(thres = thresholds) %dopar% {
distance_scores(num_table = a375_go ,threshold_count = thres,names = colnames(a375_go))
}
# average distance for different thresholds
distance <- do.call(cbind,dist_a375)
distance <- array(distance,c(dim=dim(dist_a375[[1]]),length(dist_a375)))
mean_dist_a375 <- apply(distance, c(1,2), mean, na.rm = TRUE)
mean_dist_a375[lower.tri(mean_dist_a375,diag = T)] <- 666
colnames(mean_dist_a375) <- as.character(a375$pert_id)
rownames(mean_dist_a375) <- as.character(a375$pert_id)
# long format dataframe
a375_dist <- reshape2::melt(mean_dist_a375)
a375_dist <- a375_dist %>% filter(value != 666)
# add rdkit smiles to a375
a375 <- left_join(a375,pert)
a375 <- a375 %>% dplyr::select(sig_id,pert_id,pert_iname,quality,rdkit,pert_dose,pert_time)
# add info from the a375 dataframe
a375_dist <- left_join(a375_dist,a375, by = c("Var1"="pert_id"))
a375_dist <- left_join(a375_dist,a375, by = c("Var2"="pert_id"))
write.csv(a375_dist,'../learning/data/hepg2/alldata_hepg2.csv')
# get the signatures for a375
a375 <- drug_sigs_per_line(cell_line = "HCC515",sig_info = sig_info,
sig_metrics = sig_metrics)
a375 <- a375 %>% filter(quality==1)
a375 <- a375[which(as.character(a375$pert_id) %in% pert$pert_id),]
go_nes <- go_path_analysis(sig_ids = a375$sig_id,cmap_path_to_gctx = ds_path,landmark_df = landmark,goterms = go_anno)
a375_go <- go_nes[[1]]
# run distances
thresholds <- c(10,20,30,40,50)
dist_a375 <- NULL
### calculate distances
dist_a375 <- foreach(thres = thresholds) %dopar% {
distance_scores(num_table = a375_go ,threshold_count = thres,names = colnames(a375_go))
}
# average distance for different thresholds
distance <- do.call(cbind,dist_a375)
distance <- array(distance,c(dim=dim(dist_a375[[1]]),length(dist_a375)))
mean_dist_a375 <- apply(distance, c(1,2), mean, na.rm = TRUE)
mean_dist_a375[lower.tri(mean_dist_a375,diag = T)] <- 666
colnames(mean_dist_a375) <- as.character(a375$pert_id)
rownames(mean_dist_a375) <- as.character(a375$pert_id)
# long format dataframe
a375_dist <- reshape2::melt(mean_dist_a375)
a375_dist <- a375_dist %>% filter(value != 666)
# add rdkit smiles to a375
a375 <- left_join(a375,pert)
a375 <- a375 %>% dplyr::select(sig_id,pert_id,pert_iname,quality,rdkit,pert_dose,pert_time)
# add info from the a375 dataframe
a375_dist <- left_join(a375_dist,a375, by = c("Var1"="pert_id"))
a375_dist <- left_join(a375_dist,a375, by = c("Var2"="pert_id"))
write.csv(a375_dist,'../learning/data/hcc515/alldata_hcc515.csv')
# get the signatures for a375
a375 <- drug_sigs_per_line(cell_line = "NPC",sig_info = sig_info,
sig_metrics = sig_metrics)
a375 <- a375 %>% filter(quality==1)
a375 <- a375[which(as.character(a375$pert_id) %in% pert$pert_id),]
go_nes <- go_path_analysis(sig_ids = a375$sig_id,cmap_path_to_gctx = ds_path,landmark_df = landmark,goterms = go_anno)
a375_go <- go_nes[[1]]
# run distances
thresholds <- c(10,20,30,40,50)
dist_a375 <- NULL
### calculate distances
dist_a375 <- foreach(thres = thresholds) %dopar% {
distance_scores(num_table = a375_go ,threshold_count = thres,names = colnames(a375_go))
}
# average distance for different thresholds
distance <- do.call(cbind,dist_a375)
distance <- array(distance,c(dim=dim(dist_a375[[1]]),length(dist_a375)))
mean_dist_a375 <- apply(distance, c(1,2), mean, na.rm = TRUE)
mean_dist_a375[lower.tri(mean_dist_a375,diag = T)] <- 666
colnames(mean_dist_a375) <- as.character(a375$pert_id)
rownames(mean_dist_a375) <- as.character(a375$pert_id)
# long format dataframe
a375_dist <- reshape2::melt(mean_dist_a375)
a375_dist <- a375_dist %>% filter(value != 666)
# add rdkit smiles to a375
a375 <- left_join(a375,pert)
a375 <- a375 %>% dplyr::select(sig_id,pert_id,pert_iname,quality,rdkit,pert_dose,pert_time)
# add info from the a375 dataframe
a375_dist <- left_join(a375_dist,a375, by = c("Var1"="pert_id"))
a375_dist <- left_join(a375_dist,a375, by = c("Var2"="pert_id"))
write.csv(a375_dist,'../learning/data/npc/alldata_npc.csv')
library(CARNIVAL)
load(file = system.file("toy_network_ex1.RData",
package="CARNIVAL"))
View(toy_network_ex1)
is.matrix(toy_network_ex1)
