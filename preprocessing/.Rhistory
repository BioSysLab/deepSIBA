vcap <- vcap %>% filter(quality==1)
vcap <- vcap[which(as.character(vcap$pert_id) %in% pert$pert_id),]
# get the signatures for a375
a549 <- drug_sigs_per_line(cell_line = toupper("a549"),sig_info = sig_info,
sig_metrics = sig_metrics)
a549 <- a549 %>% filter(quality==1)
a549 <- a549[which(as.character(a549$pert_id) %in% pert$pert_id),]
all <- rbind(a375,a549,mcf7,pc3,vcap)
View(all)
all <- all %>% select(sig_id,pert_id,pert_iname,cell_id,pert_dose,pert_time)
saveRDS(all,'../../info_assess.rds')
t <- data.table::fread('../../deepSNEM_personal/gene_data/allsigs.csv')
View(t)
unique(t$moa_v1)
View(all)
t <- t %>% select(-sig_id)
cmap <- data.table::fread('../../deepSNEM_personal/gene_data/gene_features_all.csv')
View(cmap)
sig_ids <- all$sig_id
cmap_path_to_gctx = ds_path
landmark_df = landmark
goterms = go_anno
### this function calculates the NES and p.adj of the given signature ids
### GOterms in a list form are used
library(tidyverse)
library(fgsea)
library(gage)
library(EGSEAdata)
library(AnnotationDbi)
library(org.Hs.eg.db)
profiles <- get_cmap_signatures(cmap_path_to_gctx = cmap_path_to_gctx,sig_ids = sig_ids,landmark = T,landmark_df = landmark_df)
View(profiles)
library(Rtsne)
library(viridis)
addSmallLegend <- function(myPlot, pointSize = 0.5, textSize = 3, spaceLegend = 0.1) {
myPlot +
guides(shape = guide_legend(override.aes = list(size = pointSize)),
color = guide_legend(override.aes = list(size = pointSize))) +
theme(legend.title = element_text(size = textSize),
legend.text  = element_text(size = textSize),
legend.key.size = unit(spaceLegend, "lines"))
}
k <- seq(1:30)
dunn <- NULL
cc <- 1
saveRDS(profiles,'../../profiles_asses.rds')
profiles <- t(profiles)
View(profiles)
end_col <- ncol(profiles)
plate <- profiles
for (i in k){
my_km <- kmeans(plate[,3:end_col],i)
dunn[cc] <- my_km$tot.withinss/(my_km$tot.withinss+my_km$betweenss)
cc <- cc+1
}
k_plot <- ggplot(data.frame(k,dunn),aes(x=k,y=dunn))+
geom_line(size = 0.8)+geom_point()+ylim(0.0,1)+ggtitle('Optimal number of clusters:Elbow method')+
scale_x_continuous(breaks = seq(1:30),minor_breaks = NULL) + xlab("Number of clusters") + ylab("Dunn index")
k_plot+geom_segment(
x = 6, y = 0,
xend = 6, yend = dunn[6],
lineend = "round", # See available arrow types in example above
linejoin = "round",
size = 0.5,
arrow = arrow(length = unit(0.1, "inches")),
colour = "red",
linetype= 'dashed'
)
k <- seq(1:100)
dunn <- NULL
cc <- 1
end_col <- ncol(profiles)
plate <- profiles
for (i in k){
my_km <- kmeans(plate[,3:end_col],i)
dunn[cc] <- my_km$tot.withinss/(my_km$tot.withinss+my_km$betweenss)
cc <- cc+1
}
ggplot(data.frame(k,dunn),aes(x=k,y=dunn))+
geom_line(size = 0.8)+geom_point()+ylim(0.0,1)+ggtitle('Optimal number of clusters:Elbow method')+
scale_x_continuous(breaks = seq(1:30),minor_breaks = NULL) + xlab("Number of clusters") + ylab("Dunn index")
ggplot(data.frame(k,dunn),aes(x=k,y=dunn))+
geom_line(size = 0.8)+geom_point()+ylim(0.0,1)+ggtitle('Optimal number of clusters:Elbow method')+
scale_x_continuous(breaks = seq(1:100),minor_breaks = NULL) + xlab("Number of clusters") + ylab("Dunn index")
ggplot(data.frame(k,dunn),aes(x=k,y=dunn))+
geom_line(size = 0.8)+geom_point()+ylim(0.0,1)+ggtitle('Optimal number of clusters:Elbow method')+
scale_x_continuous(breaks = seq(1:100,5),minor_breaks = NULL) + xlab("Number of clusters") + ylab("Dunn index")
?seq
ggplot(data.frame(k,dunn),aes(x=k,y=dunn))+
geom_line(size = 0.8)+geom_point()+ylim(0.0,1)+ggtitle('Optimal number of clusters:Elbow method')+
scale_x_continuous(breaks = seq(1:100,by=5),minor_breaks = NULL) + xlab("Number of clusters") + ylab("Dunn index")
ggplot(data.frame(k,dunn),aes(x=k,y=dunn))+
geom_line(size = 0.8)+geom_point()+ylim(0.0,1)+ggtitle('Optimal number of clusters:Elbow method')+
scale_x_continuous(breaks = seq(from=1,to=100,by=5),minor_breaks = NULL) + xlab("Number of clusters") + ylab("Dunn index")
k_plot <- ggplot(data.frame(k,dunn),aes(x=k,y=dunn))+
geom_line(size = 0.8)+geom_point()+ylim(0.0,1)+ggtitle('Optimal number of clusters:Elbow method')+
scale_x_continuous(breaks = seq(from=1,to=100,by=5),minor_breaks = NULL) + xlab("Number of clusters") + ylab("Dunn index")
k_plot+geom_segment(
x = 25, y = 0,
xend = 25, yend = dunn[25],
lineend = "round", # See available arrow types in example above
linejoin = "round",
size = 0.5,
arrow = arrow(length = unit(0.1, "inches")),
colour = "red",
linetype= 'dashed'
)
k_plot <- ggplot(data.frame(k,dunn),aes(x=k,y=dunn))+
geom_line(size = 0.8)+geom_point()+ylim(0.0,1)+ggtitle('Optimal number of clusters:Elbow method')+
scale_x_continuous(breaks = seq(from=1,to=100,by=5),minor_breaks = NULL) + xlab("Number of clusters") + ylab("Dunn index")
k_plot+geom_segment(
x = 21, y = 0,
xend = 21, yend = dunn[21],
lineend = "round", # See available arrow types in example above
linejoin = "round",
size = 0.5,
arrow = arrow(length = unit(0.1, "inches")),
colour = "red",
linetype= 'dashed'
)
View(t)
unique(t$moa_v1)
t <- t %>% filter((moa_v1=='hdac_inhibitor') | (moa_v1=='pi3k_inhibitor') | (moa_v1=='cdk_inhibitor') | (moa_v1=='mtor_inhibitor') | (moa_v1=='topoisomerase_inhibitor') | (moa_v1=='dna_rna_damage') | (moa_v1=='protein_synthesis_inhibitor'))
my_km <- kmeans(plate[,3:end_col],500)
my_km$tot.withinss/(my_km$tot.withinss+my_km$betweenss)
k <- seq(from=1,to=1000,by=10)
dunn <- NULL
cc <- 1
end_col <- ncol(profiles)
plate <- profiles
for (i in k){
my_km <- kmeans(plate[,3:end_col],i)
dunn[cc] <- my_km$tot.withinss/(my_km$tot.withinss+my_km$betweenss)
cc <- cc+1
}
k_plot <- ggplot(data.frame(k,dunn),aes(x=k,y=dunn))+
geom_line(size = 0.8)+geom_point()+ylim(0.0,1)+ggtitle('Optimal number of clusters:Elbow method')+
scale_x_continuous(breaks = seq(from=1,to=1000,by=50),minor_breaks = NULL) + xlab("Number of clusters") + ylab("Dunn index")
k_plot+geom_segment(
x = 21, y = 0,
xend = 21, yend = dunn[21],
lineend = "round", # See available arrow types in example above
linejoin = "round",
size = 0.5,
arrow = arrow(length = unit(0.1, "inches")),
colour = "red",
linetype= 'dashed'
)
k_plot <- ggplot(data.frame(k,dunn),aes(x=k,y=dunn))+
geom_line(size = 0.8)+geom_point()+ylim(0.0,1)+ggtitle('Optimal number of clusters:Elbow method')+
scale_x_continuous(breaks = seq(from=1,to=1000,by=50),minor_breaks = NULL) + xlab("Number of clusters") + ylab("Dunn index")
k_plot+geom_segment(
x = 200, y = 0,
xend = 200, yend = dunn[200],
lineend = "round", # See available arrow types in example above
linejoin = "round",
size = 0.5,
arrow = arrow(length = unit(0.1, "inches")),
colour = "red",
linetype= 'dashed'
)
k_plot <- ggplot(data.frame(k,dunn),aes(x=k,y=dunn))+
geom_line(size = 0.8)+geom_point()+ylim(0.0,1)+ggtitle('Optimal number of clusters:Elbow method')+
scale_x_continuous(breaks = seq(from=1,to=1000,by=50),minor_breaks = NULL) + xlab("Number of clusters") + ylab("Dunn index")
k_plot+geom_segment(
x = 201, y = 0,
xend = 201, yend = dunn[201],
lineend = "round", # See available arrow types in example above
linejoin = "round",
size = 0.5,
arrow = arrow(length = unit(0.1, "inches")),
colour = "red",
linetype= 'dashed'
)
dunn[201]
k_plot <- ggplot(data.frame(k,dunn),aes(x=k,y=dunn))+
geom_line(size = 0.8)+geom_point()+ylim(0.0,1)+ggtitle('Optimal number of clusters:Elbow method')+
scale_x_continuous(breaks = seq(from=1,to=1000,by=50),minor_breaks = NULL) + xlab("Number of clusters") + ylab("Dunn index")
k_plot+geom_segment(
x = 201, y = 0,
xend = 201, yend = dunn[20],
lineend = "round", # See available arrow types in example above
linejoin = "round",
size = 0.5,
arrow = arrow(length = unit(0.1, "inches")),
colour = "red",
linetype= 'dashed'
)
k_plot <- ggplot(data.frame(k,dunn),aes(x=k,y=dunn))+
geom_line(size = 0.8)+geom_point()+ylim(0.0,1)+ggtitle('Optimal number of clusters:Elbow method')+
scale_x_continuous(breaks = seq(from=1,to=1000,by=50),minor_breaks = NULL) + xlab("Number of clusters") + ylab("Dunn index")
k_plot+geom_segment(
x = 171, y = 0,
xend = 171, yend = dunn[17],
lineend = "round", # See available arrow types in example above
linejoin = "round",
size = 0.5,
arrow = arrow(length = unit(0.1, "inches")),
colour = "red",
linetype= 'dashed'
)
my_km <- kmeans(plate[,3:end_col],170)
cls <- as.matrix(my_km$cluster)
plate$Cluster <- cls
#PCA Visualize
library(factoextra)
pca.cells <- prcomp(plate[,3:end_col],scale=T)
View(plate)
plate <- profiles
my_km <- kmeans(plate[,3:end_col],170)
cls <- as.matrix(my_km$cluster)
plate$Cluster <- cls
end_col <- ncol(profiles)
plate <- profiles
my_km <- kmeans(plate[,3:end_col],170)
cls <- as.matrix(my_km$cluster)
View(cls)
plate <- cbind(plate,cls)
colnames(plate)[ncol(plate)] <- Cluster
colnames(plate)[ncol(plate)] <- 'Cluster'
View(plate)
plate$Cluster
colnames(plate)
#PCA Visualize
library(factoextra)
pca.cells <- prcomp(plate[,3:end_col],scale=T)
fviz_eig(pca.cells)
?fviz_eig
fviz_eig(pca.cells,ncp = 100)
fviz_eig(pca.cells,ncp = 80)
fviz_eig(pca.cells,ncp = 50)
#plate <- plate %>% filter(Parent!='Other')
perpl = DescTools::RoundTo(sqrt(nrow(plate)), multiple = 5, FUN = round)
init_dim = 50
iter = 1000
emb_size = end_col
k <- seq(from=1,to=1000,by=10)
dunn <- NULL
cc <- 1
end_col <- ncol(profiles)
plate <- profiles
for (i in k){
my_km <- kmeans(plate,i)
dunn[cc] <- my_km$tot.withinss/(my_km$tot.withinss+my_km$betweenss)
cc <- cc+1
}
k_plot <- ggplot(data.frame(k,dunn),aes(x=k,y=dunn))+
geom_line(size = 0.8)+geom_point()+ylim(0.0,1)+ggtitle('Optimal number of clusters:Elbow method')+
scale_x_continuous(breaks = seq(from=1,to=1000,by=50),minor_breaks = NULL) + xlab("Number of clusters") + ylab("Dunn index")
k_plot+geom_segment(
x = 171, y = 0,
xend = 171, yend = dunn[17],
lineend = "round", # See available arrow types in example above
linejoin = "round",
size = 0.5,
arrow = arrow(length = unit(0.1, "inches")),
colour = "red",
linetype= 'dashed'
)
k_plot <- ggplot(data.frame(k,dunn),aes(x=k,y=dunn))+
geom_line(size = 0.8)+geom_point()+ylim(0.0,1)+ggtitle('Optimal number of clusters:Elbow method')+
scale_x_continuous(breaks = seq(from=1,to=1000,by=50),minor_breaks = NULL) + xlab("Number of clusters") + ylab("Dunn index")
k_plot+geom_segment(
x = 151, y = 0,
xend = 151, yend = dunn[15],
lineend = "round", # See available arrow types in example above
linejoin = "round",
size = 0.5,
arrow = arrow(length = unit(0.1, "inches")),
colour = "red",
linetype= 'dashed'
)
my_km <- kmeans(plate,151)
cls <- as.matrix(my_km$cluster)
plate <- cbind(plate,cls)
colnames(plate)[ncol(plate)] <- 'Cluster'
#PCA Visualize
library(factoextra)
pca.cells <- prcomp(plate,scale=T)
fviz_eig(pca.cells,ncp = 50)
#plate <- plate %>% filter(Parent!='Other')
perpl = DescTools::RoundTo(sqrt(nrow(plate)), multiple = 5, FUN = round)
init_dim = 50
iter = 1000
emb_size = end_col
tsne_all <- Rtsne(plate[,1:end_col],
dims = 2, perplexity=perpl,
verbose=TRUE, max_iter = iter,initial_dims = init_dim,check_duplicates = F)
plate <- as.data.frame(plate)
df_all <- data.frame(V1 = tsne_all$Y[,1], V2 =tsne_all$Y[,2],
label = as.factor(plate$Cluster))
gtsne <- ggplot(df_all, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T) + scale_color_discrete()
print(gtsne)
gtsne <- ggplot(df_all, aes(V1, V2))+
geom_point(aes(color = label),show.legend = F) + scale_color_discrete()
print(gtsne)
library(umap)
#UMAP Visualize
map <- umap(plate[,1:end_col])
df_map <- data.frame(V1 = map$layout[,1], V2 = map$layout[,2], label = as.factor(plate$Cluster))
#png(file=paste0(output_dir,"/task1/","task1_same_sig_id_umap.png"),width=9,height=9,units = "in",res=300)
gg_map <- ggplot(df_map, aes(V1, V2))+
geom_point(aes(color = label))+aes(group=rev(label))
print(gg_map)
#png(file=paste0(output_dir,"/task1/","task1_same_sig_id_umap.png"),width=9,height=9,units = "in",res=300)
gg_map <- ggplot(df_map, aes(V1, V2))+
geom_point(aes(color = label))
print(gg_map)
#png(file=paste0(output_dir,"/task1/","task1_same_sig_id_umap.png"),width=9,height=9,units = "in",res=300)
gg_map <- ggplot(df_map, aes(V1, V2))+
geom_point(aes(color = label),show.legend = F)+aes(group=rev(label))
print(gg_map)
View(t)
unique(t$moa_v1)
View(cmap)
feats <- data.table::fread('../../deepSNEM_personal/gene_data/gene_features_all.csv')
tt <- t$sig_id.y
tt <- t$sig_id
t <- data.table::fread('../../deepSNEM_personal/gene_data/allsigs.csv')
t <- t %>% filter((moa_v1=='hdac_inhibitor') | (moa_v1=='pi3k_inhibitor') | (moa_v1=='cdk_inhibitor') | (moa_v1=='mtor_inhibitor') | (moa_v1=='topoisomerase_inhibitor') | (moa_v1=='dna_rna_damage') | (moa_v1=='protein_synthesis_inhibitor') | (moa_v1=='atp_inhibitor'))
t <- data.table::fread('../../deepSNEM_personal/gene_data/allsigs.csv')
t <- t %>% filter((moa_v1=='hdac_inhibitor') | (moa_v1=='pi3k_inhibitor') | (moa_v1=='cdk_inhibitor') | (moa_v1=='mtor_inhibitor') | (moa_v1=='topoisomerase_inhibitor') | (moa_v1=='dna_rna_damage') | (moa_v1=='protein_synthesis_inhibitor'))
t <- data.table::fread('../../deepSNEM_personal/gene_data/allsigs.csv')
View(t)
t <- t %>% filter((moa_v1=='hdac_inhibitor') | (moa_v1=='pi3k_inhibitor') | (moa_v1=='cdk_inhibitor') | (moa_v1=='mtor_inhibitor') | (moa_v1=='topoisomerase_inhibitor') | (moa_v1=='dna_rna_damage') | (moa_v1=='protein_synthesis_inhibitor') | (moa_v1=='atp_synthesis_inhibitor'))
tt <- t$sig_id
feats <- feats %>% filter(sig_ids %in% tt)
feats <- feats %>% filter(sig_id %in% tt)
View(feats)
end_col <- ncol(profiles)+1
plate <- feats
rownames(feats) <- feats$sig_id
feats <- feats %>% select(-sig_id)
feats <- feats[,-1]
View(feats)
k <- seq(from=1,to=700,by=10)
dunn <- NULL
cc <- 1
end_col <- ncol(feats)
plate <- feats
for (i in k){
my_km <- kmeans(plate,i)
dunn[cc] <- my_km$tot.withinss/(my_km$tot.withinss+my_km$betweenss)
cc <- cc+1
}
k_plot <- ggplot(data.frame(k,dunn),aes(x=k,y=dunn))+
geom_line(size = 0.8)+geom_point()+ylim(0.0,1)+ggtitle('Optimal number of clusters:Elbow method')+
scale_x_continuous(breaks = seq(from=1,to=700,by=35),minor_breaks = NULL) + xlab("Number of clusters") + ylab("Dunn index")
k_plot+geom_segment(
x = 151, y = 0,
xend = 151, yend = dunn[15],
lineend = "round", # See available arrow types in example above
linejoin = "round",
size = 0.5,
arrow = arrow(length = unit(0.1, "inches")),
colour = "red",
linetype= 'dashed'
)
unique(t$moa_v1)
k <- seq(1:15)
dunn <- NULL
cc <- 1
end_col <- ncol(feats)
plate <- feats
for (i in k){
my_km <- kmeans(plate,i)
dunn[cc] <- my_km$tot.withinss/(my_km$tot.withinss+my_km$betweenss)
cc <- cc+1
}
k_plot <- ggplot(data.frame(k,dunn),aes(x=k,y=dunn))+
geom_line(size = 0.8)+geom_point()+ylim(0.0,1)+ggtitle('Optimal number of clusters:Elbow method')+
scale_x_continuous(breaks = seq(1:15),minor_breaks = NULL) + xlab("Number of clusters") + ylab("Dunn index")
k_plot+geom_segment(
x = 7, y = 0,
xend = 7, yend = dunn[7],
lineend = "round", # See available arrow types in example above
linejoin = "round",
size = 0.5,
arrow = arrow(length = unit(0.1, "inches")),
colour = "red",
linetype= 'dashed'
)
my_km <- kmeans(plate,7)
cls <- as.matrix(my_km$cluster)
plate <- cbind(plate,cls)
colnames(plate)[ncol(plate)] <- 'Cluster'
#PCA Visualize
library(factoextra)
pca.cells <- prcomp(plate,scale=T)
fviz_eig(pca.cells,ncp = 50)
#plate <- plate %>% filter(Parent!='Other')
perpl = DescTools::RoundTo(sqrt(nrow(plate)), multiple = 5, FUN = round)
init_dim = 50
iter = 1000
emb_size = end_col
tsne_all <- Rtsne(plate[,1:end_col],
dims = 2, perplexity=perpl,
verbose=TRUE, max_iter = iter,initial_dims = init_dim,check_duplicates = F)
plate <- as.data.frame(plate)
df_all <- data.frame(V1 = tsne_all$Y[,1], V2 =tsne_all$Y[,2],
label = as.factor(plate$Cluster))
gtsne <- ggplot(df_all, aes(V1, V2))+
geom_point(aes(color = label),show.legend = F) + scale_color_discrete()
print(gtsne)
plate <- feats
my_km <- kmeans(plate,71)
cls <- as.matrix(my_km$cluster)
plate <- cbind(plate,cls)
colnames(plate)[ncol(plate)] <- 'Cluster'
#plate <- plate %>% filter(Parent!='Other')
perpl = DescTools::RoundTo(sqrt(nrow(plate)), multiple = 5, FUN = round)
init_dim = 50
iter = 1000
emb_size = end_col
tsne_all <- Rtsne(plate[,1:end_col],
dims = 2, perplexity=perpl,
verbose=TRUE, max_iter = iter,initial_dims = init_dim,check_duplicates = F)
plate <- as.data.frame(plate)
df_all <- data.frame(V1 = tsne_all$Y[,1], V2 =tsne_all$Y[,2],
label = as.factor(plate$Cluster))
gtsne <- ggplot(df_all, aes(V1, V2))+
geom_point(aes(color = label),show.legend = F) + scale_color_discrete()
print(gtsne)
gtsne <- ggplot(df_all, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T) + scale_color_discrete()
print(gtsne)
View(df_all)
View(feats)
View(t)
df_all <- cbind(df_all,t)
feats <- cbind(feats,t)
feats <- feats %>% filter(cell_id=='A375')
View(feats)
feats <- feats[,1:978]
k <- seq(1:15)
dunn <- NULL
cc <- 1
end_col <- ncol(feats)
plate <- feats
for (i in k){
my_km <- kmeans(plate,i)
dunn[cc] <- my_km$tot.withinss/(my_km$tot.withinss+my_km$betweenss)
cc <- cc+1
}
k_plot <- ggplot(data.frame(k,dunn),aes(x=k,y=dunn))+
geom_line(size = 0.8)+geom_point()+ylim(0.0,1)+ggtitle('Optimal number of clusters:Elbow method')+
scale_x_continuous(breaks = seq(1:15),minor_breaks = NULL) + xlab("Number of clusters") + ylab("Dunn index")
k_plot+geom_segment(
x = 7, y = 0,
xend = 7, yend = dunn[7],
lineend = "round", # See available arrow types in example above
linejoin = "round",
size = 0.5,
arrow = arrow(length = unit(0.1, "inches")),
colour = "red",
linetype= 'dashed'
)
k <- seq(1:30)
dunn <- NULL
cc <- 1
end_col <- ncol(feats)
plate <- feats
for (i in k){
my_km <- kmeans(plate,i)
dunn[cc] <- my_km$tot.withinss/(my_km$tot.withinss+my_km$betweenss)
cc <- cc+1
}
k_plot <- ggplot(data.frame(k,dunn),aes(x=k,y=dunn))+
geom_line(size = 0.8)+geom_point()+ylim(0.0,1)+ggtitle('Optimal number of clusters:Elbow method')+
scale_x_continuous(breaks = seq(1:15),minor_breaks = NULL) + xlab("Number of clusters") + ylab("Dunn index")
k_plot+geom_segment(
x = 7, y = 0,
xend = 7, yend = dunn[7],
lineend = "round", # See available arrow types in example above
linejoin = "round",
size = 0.5,
arrow = arrow(length = unit(0.1, "inches")),
colour = "red",
linetype= 'dashed'
)
my_km <- kmeans(plate,13)
cls <- as.matrix(my_km$cluster)
plate <- cbind(plate,cls)
colnames(plate)[ncol(plate)] <- 'Cluster'
#PCA Visualize
library(factoextra)
pca.cells <- prcomp(plate,scale=T)
# Results for Variables
res.var <- get_pca_var(pca.cells)
fviz_eig(pca.cells,ncp = 50)
#plate <- plate %>% filter(Parent!='Other')
perpl = DescTools::RoundTo(sqrt(nrow(plate)), multiple = 5, FUN = round)
init_dim = 20
iter = 1000
emb_size = end_col
tsne_all <- Rtsne(plate[,1:end_col],
dims = 2, perplexity=perpl,
verbose=TRUE, max_iter = iter,initial_dims = init_dim,check_duplicates = F)
plate <- as.data.frame(plate)
df_all <- data.frame(V1 = tsne_all$Y[,1], V2 =tsne_all$Y[,2],
label = as.factor(plate$Cluster))
gtsne <- ggplot(df_all, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T) + scale_color_discrete()
print(gtsne)
feats <- data.table::fread('../../deepSNEM_personal/gene_data/gene_features_all.csv')
feats <- feats %>% filter(sig_ids %in% tt)
feats <- feats %>% filter(sig_id %in% tt)
View(feats)
saveRDS(feats,'../../feats_asses_moa.rds')
saveRDS(t,'../../info_asses_moa.rds')
View(t)
