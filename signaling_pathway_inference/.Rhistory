cell_line <- "MCF7"
# read all signature data frame
# the file below can be found at deepSIBA drive, data preprocessing
all <- readRDS("C:/Users/user/Documents/deepSIBA/preprocessing/data_preprocessing/processed_data/initial_signatures_with_mycranks.rds")
pert <- readRDS("C:/Users/user/Documents/deepSIBA/preprocessing/data_preprocessing/utility/pert_id_to_rdkit.rds")
library(tidyverse)
all <- left_join(all,pert)
all <- all %>% filter(!is.na(rdkit))
library(GO.db)
# extract a named vector of all terms
goterms <- Term(GOTERM)
# read pathway scores
path_pa <- "pathway_inference_data/nes_compounds_all.rds"
# path to the neighbor file from step 1
neighbor_file <- "C:/Users/user/Documents/deepSIBA/results/inference_test_1/results_trainingset.csv"
# read neighbor file
neighbors <- read.csv(neighbor_file)
View(neighbors)
# for each drug in the query count up the similars
neighbors <- neighbors %>% group_by(query) %>% mutate(counts = n_distinct(x1)) %>% ungroup()
# for each drug in the query count up the similars
neighbors <- neighbors %>% group_by(query) %>% mutate(counts = n_distinct(x)) %>% ungroup()
n_min_neighbors = 5
query_val <- query_val %>% filter(counts >= n_min_neighbors)
neighbors <- neighbors %>% filter(counts >= n_min_neighbors)
# what query drugs are left
query_drugs <- unique(as.character(neighbors$query))
length(query_drugs)
# read precalculated p value distributions for up and downregulated pathways
dist_pb <- readRDS("pathway_inference_data/distributions_pb.rds")
dist_pt <- readRDS("pathway_inference_data/distributions_pt.rds")
get_com_sigs_2 <- function(pa,tb_pa=10, sig_ids, majority_thresh = 0.5) {
#library(tidyverse)
#library(rhdf5)
#library(org.Hs.eg.db)
# load the GO library
#library(GO.db)
# extract a named vector of all terms
#goterms <- Term(GOTERM)
#goterms <- as.data.frame(goterms) %>% rownames_to_column("id")
majority <- function(x,nrow,tb){
# work for bot
bot <- sum((x<=tb + 0))/length(x)
top <- sum((x>=(nrow-tb+1)))/length(x)
return(cbind(bot,top))
}
pathways <- pa[,sig_ids]
pathways <- apply(pathways,MARGIN = 2,FUN = rank,ties.method = "random")
pa_tb <- t(apply(pathways,MARGIN = 1,FUN = majority,nrow = nrow(pathways),tb = tb_pa))
colnames(pa_tb) <- c("bot","top")
pa_bot <- pa_tb[,1]
pa_top <- pa_tb[,2]
#Return output list
output <- list(pa_bot,pa_top)
names(output) <- c("BotPAs","TopPAs")
return(output)
}
infer_pathways <- function(cell_line, path_pa, neighbor_file, all, n_min_neighbors, tb_pa, dist_pb, dist_pt,
fr_thresh, p_val_thresh){
# read pathway scores
pathway_scores <- readRDS(path_pa)
# read neighbor file
neighbors <- read.csv(neighbor_file)
# for each drug in the query count up the similars
neighbors <- neighbors %>% group_by(query) %>% mutate(counts = n_distinct(x)) %>% ungroup()
# set minimum number of similars for go term overlap
neighbors <- neighbors %>% filter(counts >= n_min_neighbors)
# what query drugs are left
query_drugs <- unique(as.character(neighbors$query))
length(query_drugs)
# set number of neighbors for p value distributions
neighbors_dist <- c(5,8,10,12,15,20,25,30,35,40,50,60,70,85,100,120,150,175,200,225)
results_train <- NULL
results <- NULL
for (i in 1:length(query_drugs)){
# keep in filt the similars of each query in the loop
filt <- neighbors[which(neighbors$query == query_drugs[i]),]
# add rdkit and sig ids in filt
cell <- all %>% filter(cell_id == cell_line)
filt <- left_join(filt,cell, by = c("x"="rdkit"))
diff <- abs(nrow(filt) - neighbors_dist)
pos <- which(diff==min(diff))[1]
# now get the common pas and gos for the similars of the query
train_overlap <- get_com_sigs_2(pa = pathway_scores,sig_ids = filt$sig_id,
tb_pa = tb_pa)
pb_p <- NULL
pt_p <- NULL
for (k in 1:length(train_overlap$BotPAs)) {
pb_p[k] <- length(which(dist_pb[[pos]][k,]>=train_overlap$BotPAs[k]))/5000
pt_p[k] <- length(which(dist_pt[[pos]][k,]>=train_overlap$TopPAs[k]))/5000
}
train_overlap$BotPAs <- cbind(train_overlap$BotPAs,pb_p)
train_overlap$TopPAs <- cbind(train_overlap$TopPAs,pt_p)
results_train[[i]] <- train_overlap
bot_pas <- names(which(results_train[[i]]$BotPAs[,1] >= fr_thresh & results_train[[i]]$BotPAs[,2] <= p_val_thresh))
top_pas <- names(which(results_train[[i]]$TopPAs[,1] >= fr_thresh & results_train[[i]]$TopPAs[,2] <= p_val_thresh))
results[[i]] <- list(bot_pas,top_pas)
}
}
test <- infer_pathways(cell_line = "MCF7",path_pa = path_pa,neighbor_file = neighbor_file,all = all,n_min_neighbors = 5,tb_pa = 10,dist_pb = dist_pb,dist_pt = dist_pt,fr_thresh = 0.65,p_val_thresh = 0.01)
for (i in 1:length(query_drugs)){print(i)}
query_drugs[1]
# read pathway scores
pathway_scores <- readRDS(path_pa)
# read neighbor file
neighbors <- read.csv(neighbor_file)
# for each drug in the query count up the similars
neighbors <- neighbors %>% group_by(query) %>% mutate(counts = n_distinct(x)) %>% ungroup()
# set minimum number of similars for go term overlap
neighbors <- neighbors %>% filter(counts >= n_min_neighbors)
# what query drugs are left
query_drugs <- unique(as.character(neighbors$query))
length(query_drugs)
# set number of neighbors for p value distributions
neighbors_dist <- c(5,8,10,12,15,20,25,30,35,40,50,60,70,85,100,120,150,175,200,225)
results_train <- NULL
results <- NULL
i <- 1
# keep in filt the similars of each query in the loop
filt <- neighbors[which(neighbors$query == query_drugs[i]),]
# add rdkit and sig ids in filt
cell <- all %>% filter(cell_id == cell_line)
filt <- left_join(filt,cell, by = c("x"="rdkit"))
diff <- abs(nrow(filt) - neighbors_dist)
pos <- which(diff==min(diff))[1]
# now get the common pas and gos for the similars of the query
train_overlap <- get_com_sigs_2(pa = pathway_scores,sig_ids = filt$sig_id,
tb_pa = tb_pa)
tb_pa=10
# now get the common pas and gos for the similars of the query
train_overlap <- get_com_sigs_2(pa = pathway_scores,sig_ids = filt$sig_id,
tb_pa = tb_pa)
pb_p <- NULL
pt_p <- NULL
length(train_overlap$BotPAs)
for (k in 1:length(train_overlap$BotPAs)) {
pb_p[k] <- length(which(dist_pb[[pos]][k,]>=train_overlap$BotPAs[k]))/5000
pt_p[k] <- length(which(dist_pt[[pos]][k,]>=train_overlap$TopPAs[k]))/5000
}
train_overlap$BotPAs <- cbind(train_overlap$BotPAs,pb_p)
train_overlap$TopPAs <- cbind(train_overlap$TopPAs,pt_p)
results_train[[i]] <- train_overlap
bot_pas <- names(which(results_train[[i]]$BotPAs[,1] >= fr_thresh & results_train[[i]]$BotPAs[,2] <= p_val_thresh))
fr_thresh <- 0.65
p_val_thresh <- 0.01
bot_pas <- names(which(results_train[[i]]$BotPAs[,1] >= fr_thresh & results_train[[i]]$BotPAs[,2] <= p_val_thresh))
top_pas <- names(which(results_train[[i]]$TopPAs[,1] >= fr_thresh & results_train[[i]]$TopPAs[,2] <= p_val_thresh))
infer_pathways <- function(cell_line, path_pa, neighbor_file, all, n_min_neighbors, tb_pa, dist_pb, dist_pt,
fr_thresh, p_val_thresh){
# read pathway scores
pathway_scores <- readRDS(path_pa)
# read neighbor file
neighbors <- read.csv(neighbor_file)
# for each drug in the query count up the similars
neighbors <- neighbors %>% group_by(query) %>% mutate(counts = n_distinct(x)) %>% ungroup()
# set minimum number of similars for go term overlap
neighbors <- neighbors %>% filter(counts >= n_min_neighbors)
# what query drugs are left
query_drugs <- unique(as.character(neighbors$query))
length(query_drugs)
# set number of neighbors for p value distributions
neighbors_dist <- c(5,8,10,12,15,20,25,30,35,40,50,60,70,85,100,120,150,175,200,225)
results_train <- NULL
results <- NULL
for (i in 1:length(query_drugs)){
i <- 1
# keep in filt the similars of each query in the loop
filt <- neighbors[which(neighbors$query == query_drugs[i]),]
# add rdkit and sig ids in filt
cell <- all %>% filter(cell_id == cell_line)
filt <- left_join(filt,cell, by = c("x"="rdkit"))
diff <- abs(nrow(filt) - neighbors_dist)
pos <- which(diff==min(diff))[1]
# now get the common pas and gos for the similars of the query
train_overlap <- get_com_sigs_2(pa = pathway_scores,sig_ids = filt$sig_id,
tb_pa = tb_pa)
pb_p <- NULL
pt_p <- NULL
for (k in 1:length(train_overlap$BotPAs)) {
pb_p[k] <- length(which(dist_pb[[pos]][k,]>=train_overlap$BotPAs[k]))/5000
pt_p[k] <- length(which(dist_pt[[pos]][k,]>=train_overlap$TopPAs[k]))/5000
}
train_overlap$BotPAs <- cbind(train_overlap$BotPAs,pb_p)
train_overlap$TopPAs <- cbind(train_overlap$TopPAs,pt_p)
results_train[[i]] <- train_overlap
bot_pas <- names(which(results_train[[i]]$BotPAs[,1] >= fr_thresh & results_train[[i]]$BotPAs[,2] <= p_val_thresh))
top_pas <- names(which(results_train[[i]]$TopPAs[,1] >= fr_thresh & results_train[[i]]$TopPAs[,2] <= p_val_thresh))
results[[i]] <- list(bot_pas,top_pas)
}
return(results)
}
infer_pathways <- function(cell_line, path_pa, neighbor_file, all, n_min_neighbors, tb_pa, dist_pb, dist_pt,
fr_thresh, p_val_thresh, n_trials){
# read pathway scores
pathway_scores <- readRDS(path_pa)
# read neighbor file
neighbors <- read.csv(neighbor_file)
# for each drug in the query count up the similars
neighbors <- neighbors %>% group_by(query) %>% mutate(counts = n_distinct(x)) %>% ungroup()
# set minimum number of similars for go term overlap
neighbors <- neighbors %>% filter(counts >= n_min_neighbors)
# what query drugs are left
query_drugs <- unique(as.character(neighbors$query))
length(query_drugs)
# set number of neighbors for p value distributions
neighbors_dist <- c(5,8,10,12,15,20,25,30,35,40,50,60,70,85,100,120,150,175,200,225)
results_train <- NULL
results <- NULL
for (i in 1:length(query_drugs)){
i <- 1
# keep in filt the similars of each query in the loop
filt <- neighbors[which(neighbors$query == query_drugs[i]),]
# add rdkit and sig ids in filt
cell <- all %>% filter(cell_id == cell_line)
filt <- left_join(filt,cell, by = c("x"="rdkit"))
diff <- abs(nrow(filt) - neighbors_dist)
pos <- which(diff==min(diff))[1]
# now get the common pas and gos for the similars of the query
train_overlap <- get_com_sigs_2(pa = pathway_scores,sig_ids = filt$sig_id,
tb_pa = tb_pa)
pb_p <- NULL
pt_p <- NULL
for (k in 1:length(train_overlap$BotPAs)) {
pb_p[k] <- length(which(dist_pb[[pos]][k,]>=train_overlap$BotPAs[k]))/n_trials
pt_p[k] <- length(which(dist_pt[[pos]][k,]>=train_overlap$TopPAs[k]))/n_trials
}
train_overlap$BotPAs <- cbind(train_overlap$BotPAs,pb_p)
train_overlap$TopPAs <- cbind(train_overlap$TopPAs,pt_p)
results_train[[i]] <- train_overlap
bot_pas <- names(which(results_train[[i]]$BotPAs[,1] >= fr_thresh & results_train[[i]]$BotPAs[,2] <= p_val_thresh))
top_pas <- names(which(results_train[[i]]$TopPAs[,1] >= fr_thresh & results_train[[i]]$TopPAs[,2] <= p_val_thresh))
results[[i]] <- list(bot_pas,top_pas)
}
return(results)
}
test <- infer_pathways(cell_line = "MCF7",path_pa = path_pa,neighbor_file = neighbor_file,all = all,n_min_neighbors = 5,
tb_pa = 10,dist_pb = dist_pb,dist_pt = dist_pt,fr_thresh = 0.65,p_val_thresh = 0.01,n_trials = 5000)
get_com_sigs_2 <- function(pa,tb_pa=10, sig_ids, majority_thresh = 0.5) {
#library(tidyverse)
#library(rhdf5)
#library(org.Hs.eg.db)
# load the GO library
#library(GO.db)
# extract a named vector of all terms
#goterms <- Term(GOTERM)
#goterms <- as.data.frame(goterms) %>% rownames_to_column("id")
majority <- function(x,nrow,tb){
# work for bot
bot <- sum((x<=tb + 0))/length(x)
top <- sum((x>=(nrow-tb+1)))/length(x)
return(cbind(bot,top))
}
pathways <- pa[,sig_ids]
pathways <- apply(pathways,MARGIN = 2,FUN = rank,ties.method = "random")
pa_tb <- t(apply(pathways,MARGIN = 1,FUN = majority,nrow = nrow(pathways),tb = tb_pa))
colnames(pa_tb) <- c("bot","top")
pa_bot <- pa_tb[,1]
pa_top <- pa_tb[,2]
#Return output list
output <- list(pa_bot,pa_top)
names(output) <- c("BotPAs","TopPAs")
return(output)
}
infer_pathways <- function(cell_line, path_pa, neighbor_file, all, n_min_neighbors, tb_pa, dist_pb, dist_pt,
fr_thresh, p_val_thresh, n_trials){
# cell line is the cell line of choice
# path_pa is the path to the file with all the pathway scores
# neighbor_file is the path to the neighbor file produced from PI_step_1.ipynb
# all is the data file with the unique sig_ids
# n_min_neighbors are the minimum number of neighbors required to perform the inference (rec_value = 5)
# tb_pa the max length of the top and bottom pathway list that the inference looks at (rec_value = 10)
# dist_pb, dist_pt precomputed distributions of random frequency scores for each pathway for n=5000 runs
# fr_thresh the frequency threshold in order to infer a pathway from the neighbors' lists (rec_value = 0.65)
# p_val_thresh significance threshold (rec_value = 0.01)
# n_trials = 5000 for the precomputed frequency score distributions
# read pathway scores
pathway_scores <- readRDS(path_pa)
# read neighbor file
neighbors <- read.csv(neighbor_file)
# for each drug in the query count up the similars
neighbors <- neighbors %>% group_by(query) %>% mutate(counts = n_distinct(x)) %>% ungroup()
# set minimum number of similars for go term overlap
neighbors <- neighbors %>% filter(counts >= n_min_neighbors)
# what query drugs are left
query_drugs <- unique(as.character(neighbors$query))
length(query_drugs)
# set number of neighbors for p value distributions
neighbors_dist <- c(5,8,10,12,15,20,25,30,35,40,50,60,70,85,100,120,150,175,200,225)
results_train <- NULL
results <- NULL
for (i in 1:length(query_drugs)){
i <- 1
# keep in filt the similars of each query in the loop
filt <- neighbors[which(neighbors$query == query_drugs[i]),]
# add rdkit and sig ids in filt
cell <- all %>% filter(cell_id == cell_line)
filt <- left_join(filt,cell, by = c("x"="rdkit"))
diff <- abs(nrow(filt) - neighbors_dist)
pos <- which(diff==min(diff))[1]
# now get the common pas and gos for the similars of the query
train_overlap <- get_com_sigs_2(pa = pathway_scores,sig_ids = filt$sig_id,
tb_pa = tb_pa)
pb_p <- NULL
pt_p <- NULL
for (k in 1:length(train_overlap$BotPAs)) {
pb_p[k] <- length(which(dist_pb[[pos]][k,]>=train_overlap$BotPAs[k]))/n_trials
pt_p[k] <- length(which(dist_pt[[pos]][k,]>=train_overlap$TopPAs[k]))/n_trials
}
train_overlap$BotPAs <- cbind(train_overlap$BotPAs,pb_p)
train_overlap$TopPAs <- cbind(train_overlap$TopPAs,pt_p)
results_train[[i]] <- train_overlap
bot_pas <- names(which(results_train[[i]]$BotPAs[,1] >= fr_thresh & results_train[[i]]$BotPAs[,2] <= p_val_thresh))
top_pas <- names(which(results_train[[i]]$TopPAs[,1] >= fr_thresh & results_train[[i]]$TopPAs[,2] <= p_val_thresh))
results[[i]] <- list(bot_pas,top_pas)
}
names(results) <- as.character(query_drugs)
return(results)
}
test <- infer_pathways(cell_line = "MCF7",path_pa = path_pa,neighbor_file = neighbor_file,all = all,n_min_neighbors = 5,
tb_pa = 10,dist_pb = dist_pb,dist_pt = dist_pt,fr_thresh = 0.65,p_val_thresh = 0.01,n_trials = 5000)
names(results[[1]])
infer_pathways <- function(cell_line, path_pa, neighbor_file, all, n_min_neighbors, tb_pa, dist_pb, dist_pt,
fr_thresh, p_val_thresh, n_trials){
# cell line is the cell line of choice
# path_pa is the path to the file with all the pathway scores
# neighbor_file is the path to the neighbor file produced from PI_step_1.ipynb
# all is the data file with the unique sig_ids
# n_min_neighbors are the minimum number of neighbors required to perform the inference (rec_value = 5)
# tb_pa the max length of the top and bottom pathway list that the inference looks at (rec_value = 10)
# dist_pb, dist_pt precomputed distributions of random frequency scores for each pathway for n=5000 runs
# fr_thresh the frequency threshold in order to infer a pathway from the neighbors' lists (rec_value = 0.65)
# p_val_thresh significance threshold (rec_value = 0.01)
# n_trials = 5000 for the precomputed frequency score distributions
# read pathway scores
pathway_scores <- readRDS(path_pa)
# read neighbor file
neighbors <- read.csv(neighbor_file)
# for each drug in the query count up the similars
neighbors <- neighbors %>% group_by(query) %>% mutate(counts = n_distinct(x)) %>% ungroup()
# set minimum number of similars for go term overlap
neighbors <- neighbors %>% filter(counts >= n_min_neighbors)
# what query drugs are left
query_drugs <- unique(as.character(neighbors$query))
length(query_drugs)
# set number of neighbors for p value distributions
neighbors_dist <- c(5,8,10,12,15,20,25,30,35,40,50,60,70,85,100,120,150,175,200,225)
results_train <- NULL
results <- NULL
for (i in 1:length(query_drugs)){
i <- 1
# keep in filt the similars of each query in the loop
filt <- neighbors[which(neighbors$query == query_drugs[i]),]
# add rdkit and sig ids in filt
cell <- all %>% filter(cell_id == cell_line)
filt <- left_join(filt,cell, by = c("x"="rdkit"))
diff <- abs(nrow(filt) - neighbors_dist)
pos <- which(diff==min(diff))[1]
# now get the common pas and gos for the similars of the query
train_overlap <- get_com_sigs_2(pa = pathway_scores,sig_ids = filt$sig_id,
tb_pa = tb_pa)
pb_p <- NULL
pt_p <- NULL
for (k in 1:length(train_overlap$BotPAs)) {
pb_p[k] <- length(which(dist_pb[[pos]][k,]>=train_overlap$BotPAs[k]))/n_trials
pt_p[k] <- length(which(dist_pt[[pos]][k,]>=train_overlap$TopPAs[k]))/n_trials
}
train_overlap$BotPAs <- cbind(train_overlap$BotPAs,pb_p)
train_overlap$TopPAs <- cbind(train_overlap$TopPAs,pt_p)
results_train[[i]] <- train_overlap
bot_pas <- names(which(results_train[[i]]$BotPAs[,1] >= fr_thresh & results_train[[i]]$BotPAs[,2] <= p_val_thresh))
top_pas <- names(which(results_train[[i]]$TopPAs[,1] >= fr_thresh & results_train[[i]]$TopPAs[,2] <= p_val_thresh))
results[[i]] <- list(bot_pas,top_pas)
names(results[[i]]) <- c("Downregulated","Upregulated")
}
names(results) <- as.character(query_drugs)
return(results)
}
test <- infer_pathways(cell_line = "MCF7",path_pa = path_pa,neighbor_file = neighbor_file,all = all,n_min_neighbors = 5,
tb_pa = 10,dist_pb = dist_pb,dist_pt = dist_pt,fr_thresh = 0.65,p_val_thresh = 0.01,n_trials = 5000)
test$`Nc1nc(F)nc2c1ncn2C1OC(CO)C(O)C1O`
